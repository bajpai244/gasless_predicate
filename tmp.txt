coins are, [
  {
    id: "0x0928995ed5db8864d653616eff625740bdc5e5147b32f7db0292bea05bbea4600000",
    assetId: "0xf8f8b6283d7fa5b672b530cbb84fcccb4ff8dc40f8176ef4544ddb1f1952ad07",
    amount: <BN: 0xfffffffffffffd8>,
    owner: Address {
      bech32Address: "fuel1dd3cqn8mlxzku689kmn6au3cmjp3rmz4hmqymam5qqaze9hqgx8qtjpwn9",
      toAddress: [Function: toAddress],
      toB256: [Function: toB256],
      toBytes: [Function: toBytes],
      toHexString: [Function: toHexString],
      toString: [Function: toString],
      toJSON: [Function: toJSON],
      toEvmAddress: [Function: toEvmAddress],
      toAssetId: [Function: toAssetId],
      valueOf: [Function: valueOf],
      equals: [Function: equals],
    },
    blockCreated: <BN: 0x4>,
    txCreatedIdx: <BN: 0x0>,
  }
]
call sent {
  transactionId: "0xba0876fe2944129ee4f1e9838aaf3f6feb6bd2b0ecae2c9a0cf1231cb48fd9e3",
  waitForResult: [Function: waitForResult],
}
response,  {
  isMultiCall: false,
  functionScopes: [
    ScriptInvocationScope {
      transactionRequest: ScriptTransactionRequest {
        tip: undefined,
        maturity: undefined,
        maxFee: <BN: 0x0>,
        witnessLimit: undefined,
        inputs: [
          {
            id: "0x0928995ed5db8864d653616eff625740bdc5e5147b32f7db0292bea05bbea4600000",
            type: 0,
            owner: "0x6b63804cfbf9856e68e5b6e7aef238dc8311ec55bec04df774003a2c96e0418e",
            amount: <BN: 0xfffffffffffffd8>,
            assetId: "0xf8f8b6283d7fa5b672b530cbb84fcccb4ff8dc40f8176ef4544ddb1f1952ad07",
            txPointer: "0x00000000000000000000000000000000",
            witnessIndex: 0,
            predicate: undefined,
            predicateData: undefined,
          }
        ],
        outputs: [
          {
            type: 2,
            to: "0x6b63804cfbf9856e68e5b6e7aef238dc8311ec55bec04df774003a2c96e0418e",
            assetId: "0xf8f8b6283d7fa5b672b530cbb84fcccb4ff8dc40f8176ef4544ddb1f1952ad07",
          },
          {
            type: 0,
            to: "0xcdd3f03f4b5c117291e0a2fed092e27654d69003b00eafb27d3f29b1b132717b",
            amount: 10,
            assetId: "0xf8f8b6283d7fa5b672b530cbb84fcccb4ff8dc40f8176ef4544ddb1f1952ad07",
          }
        ],
        witnesses: [
          Uint8Array(64) [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]
        ],
        type: 0,
        gasLimit: <BN: 0x186a0>,
        script: Uint8Array(4360) [ 26, 240, 48, 0, 116, 0, 0, 2, 0, 0, 0, 0, 0, 0, 16, 216, 93, 255, 192, 1, 16, 255, 255, 0, 26, 236, 80, 0, 145, 0, 3, 208, 80, 83, 178, 88, 97, 64, 0, 10, 95, 237, 0, 117, 97, 64, 0, 4, 95, 237, 0, 106, 80, 67, 179, 168, 80, 71, 176, 224, 114, 72, 0, 8, 40, 69, 4, 128, 80, 75, 178, 152, 114, 64, 0, 8, 40, 73, 20, 0, 80, 67, 179, 136, 114, 68, 0, 8, 40, 65, 36, 64, 80, 67, 179, 136, 80, 71, 178, 8, 26, 233, 0, 0, 26, 229, 16, 0, 32, 248, 51, 0, 88, 251, 224, 2, 80, 251, 224, 4, 116, 0, 0, 151, 26, 71, 208, 0, 114, 72, 0, 24, 40, 237, 20, 128, 80, 71, 178, 32, 26, 233, 0, 0, 26, 229, 16, 0, 32, 248, 51, 0, 88, 251, 224, 2, 80, 251, 224, 4, 116, 0, 0, 141, 26, 67, 208, 0, 80, 71, 176, 24, 114, 72, 0, 24, 40, 69, 4, 128, 80, 67, 176, 232, 114, 72, 0, 24, 40, 67, 180, 128, 80, 73, 0, 24, 114, 76, 0, 24, 40, 73, 20, 192, 80, 71, 178, 160, 114, 72, 0, 48, 40, 69, 4, 128, 80, 67, 178, 208, 114, 72, 0, 48, 40, 65, 20, 128, 80, 71, 179, 88, 114, 72, 0, 48, 40, 69, 4, 128, 80, 67, 179, 88, 80, 71, 179, 88, 80, 69, 16, 24, 80, 75, 178, 104, 114, 76, 0, 24, 40, 73, 4, 192, 80, 67, 178, 128, 114, 76, 0, 24, 40, 65, 20, 192, 80, 71, 178, 56, 26, 233, 32, 0, 26, 229, 0, 0, 26, 225, 16, 0, 32, 248, 51, 0, 88, 251, 224, 2, 80, 251, 224, 4, 116, 0, 1, 12, 26, 67, 208, 0, 80, 71, 176, 48, 114, 72, 0, 32, 40, 69, 4, 128, 80, 67, 179, 176, 114, 72, 0, 32, 40, 65, 20, 128, 80, 67, 179, 176, 80, 71, 176, 128, 114, 72, 0, 32, 40, 69, 4, 128, 114, 64, 4, 0, 38, 64, 0, 0, 26, 64, 112, 0, 80, 75, 177, 48, 95, 237, 0, 38, 114, 64, 4, 0, 95, 237, 0, 39, 95, 236, 0, 40, 80, 67, 176, 80, 114, 76, 0, 24, 40, 65, 36, 192, 80, 75, 177, 96, 114, 76, 0, 24, 40, 73, 4, 192, 80, 67, 179, 0, 114, 76, 0, 24, 40, 65, 36, 192, 80, 75, 177, 216, 114, 76, 0, 24, 40, 73, 4, 192, 80, 67, 176, 104, 114, 76, 0, 24, 40, 65, 36, 192, 80, 75, 177, 24, 114, 76, 0, 24, 40, 73, 4, 192, 93, 87, 176, 35, 93, 79, 176, 36, 93, 67, 176, 37, 114, 72, 0, 32, 16, 73, 4, 128, 21, 73, 36, 192, 118, 72, 0, 1, 116, 0, 0, 5, 114, 72, 0, 2, 27, 77, 52, 128, 38, 76, 0, 0, 40, 29, 84, 0, 26, 84, 112, 0, 80, 75, 177, 120, 114, ... 3847 more ],
        scriptData: Uint8Array(32) [ 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 ],
        abis: {
          main: {
            programType: "script",
            specVersion: "1",
            encodingVersion: "1",
            concreteTypes: [
              {
                type: "b256",
                concreteTypeId: "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b",
              },
              {
                type: "struct std::vec::Vec<u64>",
                concreteTypeId: "d5bfe1d4e1ace20166c9b50cadd47e862020561bde24f5189cfc2723f5ed76f4",
                metadataTypeId: 3,
                typeArguments: [ "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                ],
              }, {
                type: "u64",
                concreteTypeId: "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
              }
            ],
            metadataTypes: [
              {
                type: "generic T",
                metadataTypeId: 0,
              }, {
                type: "raw untyped ptr",
                metadataTypeId: 1,
              }, {
                type: "struct std::vec::RawVec",
                metadataTypeId: 2,
                components: [
                  [Object ...], [Object ...]
                ],
                typeParameters: [ 0 ],
              }, {
                type: "struct std::vec::Vec",
                metadataTypeId: 3,
                components: [
                  [Object ...], [Object ...]
                ],
                typeParameters: [ 0 ],
              }
            ],
            functions: [
              {
                inputs: [
                  [Object ...], [Object ...]
                ],
                name: "main",
                output: "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b",
                attributes: [
                  [Object ...], [Object ...], [Object ...], [Object ...], [Object ...], [Object ...]
                ],
              }
            ],
            loggedTypes: [],
            messagesTypes: [],
            configurables: [],
          },
          otherContractsAbis: {},
        },
        toTransaction: [Function: toTransaction],
        getContractInputs: [Function: getContractInputs],
        getContractOutputs: [Function: getContractOutputs],
        getVariableOutputs: [Function: getVariableOutputs],
        setScript: [Function: setScript],
        addVariableOutputs: [Function: addVariableOutputs],
        calculateMaxGas: [Function: calculateMaxGas],
        addContractInputAndOutput: [Function: addContractInputAndOutput],
        getTransactionId: [Function: getTransactionId],
        setData: [Function: setData],
        metadataGas: [Function: metadataGas],
        getBaseTransaction: [Function: getBaseTransaction],
        toTransactionBytes: [Function: toTransactionBytes],
        pushInput: [Function: pushInput],
        pushOutput: [Function: pushOutput],
        addWitness: [Function: addWitness],
        addEmptyWitness: [Function: addEmptyWitness],
        updateWitnessByOwner: [Function: updateWitnessByOwner],
        updateWitness: [Function: updateWitness],
        addAccountWitnesses: [Function: addAccountWitnesses],
        getCoinInputs: [Function: getCoinInputs],
        getCoinOutputs: [Function: getCoinOutputs],
        getChangeOutputs: [Function: getChangeOutputs],
        getCoinInputWitnessIndexByOwner: [Function: getCoinInputWitnessIndexByOwner],
        addCoinInput: [Function: addCoinInput],
        addMessageInput: [Function: addMessageInput],
        addResource: [Function: addResource],
        addResources: [Function: addResources],
        addCoinOutput: [Function: addCoinOutput],
        addCoinOutputs: [Function: addCoinOutputs],
        addChangeOutput: [Function: addChangeOutput],
        byteSize: [Function: byteSize],
        calculateMinGas: [Function: calculateMinGas],
        fundWithFakeUtxos: [Function: fundWithFakeUtxos],
        getCoinOutputsQuantities: [Function: getCoinOutputsQuantities],
        toJSON: [Function: toJSON],
        removeWitness: [Function: removeWitness],
        adjustWitnessIndexes: [Function: adjustWitnessIndexes],
        updatePredicateGasUsed: [Function: updatePredicateGasUsed],
        byteLength: [Function: byteLength],
      },
      program: DbgExample {
        bytes: Uint8Array(4360) [ 26, 240, 48, 0, 116, 0, 0, 2, 0, 0, 0, 0, 0, 0, 16, 216, 93, 255, 192, 1, 16, 255, 255, 0, 26, 236, 80, 0, 145, 0, 3, 208, 80, 83, 178, 88, 97, 64, 0, 10, 95, 237, 0, 117, 97, 64, 0, 4, 95, 237, 0, 106, 80, 67, 179, 168, 80, 71, 176, 224, 114, 72, 0, 8, 40, 69, 4, 128, 80, 75, 178, 152, 114, 64, 0, 8, 40, 73, 20, 0, 80, 67, 179, 136, 114, 68, 0, 8, 40, 65, 36, 64, 80, 67, 179, 136, 80, 71, 178, 8, 26, 233, 0, 0, 26, 229, 16, 0, 32, 248, 51, 0, 88, 251, 224, 2, 80, 251, 224, 4, 116, 0, 0, 151, 26, 71, 208, 0, 114, 72, 0, 24, 40, 237, 20, 128, 80, 71, 178, 32, 26, 233, 0, 0, 26, 229, 16, 0, 32, 248, 51, 0, 88, 251, 224, 2, 80, 251, 224, 4, 116, 0, 0, 141, 26, 67, 208, 0, 80, 71, 176, 24, 114, 72, 0, 24, 40, 69, 4, 128, 80, 67, 176, 232, 114, 72, 0, 24, 40, 67, 180, 128, 80, 73, 0, 24, 114, 76, 0, 24, 40, 73, 20, 192, 80, 71, 178, 160, 114, 72, 0, 48, 40, 69, 4, 128, 80, 67, 178, 208, 114, 72, 0, 48, 40, 65, 20, 128, 80, 71, 179, 88, 114, 72, 0, 48, 40, 69, 4, 128, 80, 67, 179, 88, 80, 71, 179, 88, 80, 69, 16, 24, 80, 75, 178, 104, 114, 76, 0, 24, 40, 73, 4, 192, 80, 67, 178, 128, 114, 76, 0, 24, 40, 65, 20, 192, 80, 71, 178, 56, 26, 233, 32, 0, 26, 229, 0, 0, 26, 225, 16, 0, 32, 248, 51, 0, 88, 251, 224, 2, 80, 251, 224, 4, 116, 0, 1, 12, 26, 67, 208, 0, 80, 71, 176, 48, 114, 72, 0, 32, 40, 69, 4, 128, 80, 67, 179, 176, 114, 72, 0, 32, 40, 65, 20, 128, 80, 67, 179, 176, 80, 71, 176, 128, 114, 72, 0, 32, 40, 69, 4, 128, 114, 64, 4, 0, 38, 64, 0, 0, 26, 64, 112, 0, 80, 75, 177, 48, 95, 237, 0, 38, 114, 64, 4, 0, 95, 237, 0, 39, 95, 236, 0, 40, 80, 67, 176, 80, 114, 76, 0, 24, 40, 65, 36, 192, 80, 75, 177, 96, 114, 76, 0, 24, 40, 73, 4, 192, 80, 67, 179, 0, 114, 76, 0, 24, 40, 65, 36, 192, 80, 75, 177, 216, 114, 76, 0, 24, 40, 73, 4, 192, 80, 67, 176, 104, 114, 76, 0, 24, 40, 65, 36, 192, 80, 75, 177, 24, 114, 76, 0, 24, 40, 73, 4, 192, 93, 87, 176, 35, 93, 79, 176, 36, 93, 67, 176, 37, 114, 72, 0, 32, 16, 73, 4, 128, 21, 73, 36, 192, 118, 72, 0, 1, 116, 0, 0, 5, 114, 72, 0, 2, 27, 77, 52, 128, 38, 76, 0, 0, 40, 29, 84, 0, 26, 84, 112, 0, 80, 75, 177, 120, 114, ... 3847 more ],
        interface: Interface {
          functions: {
            main: FunctionFragment {
              signature: "main(s<u64>(s<u64>(rawptr,u64),u64),s<u64>(s<u64>(rawptr,u64),u64))",
              selector: "0x00000000863bff4b",
              selectorBytes: Uint8Array(12) [ 0, 0, 0, 0, 0, 0, 0, 4, 109, 97, 105, 110 ],
              encoding: "1",
              name: "main",
              jsonFn: {
                inputs: [
                  [Object ...], [Object ...]
                ],
                name: "main",
                output: "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b",
                attributes: [
                  [Object ...], [Object ...], [Object ...], [Object ...], [Object ...], [Object ...]
                ],
              },
              attributes: [
                {
                  name: "doc-comment",
                  arguments: [ " extract inputs, and outputs" ],
                }, {
                  name: "doc-comment",
                  arguments: [ " extract the script bytecode hash" ],
                }, {
                  name: "doc-comment",
                  arguments: [ " calculate the tranasaction hash based on that" ],
                },
                {
                  name: "doc-comment",
                  arguments: [ "" ],
                }, {
                  name: "doc-comment",
                  arguments: [ " V0, user can only sign over a single input and single output { only of type coin }"
                  ],
                }, {
                  name: "doc-comment",
                  arguments: [ " txn_hash = sha_256([[input_tx_id_bytes], [hash_of_serialized_output_type_coin]], [script_bytecodehash_bytes])"
                  ],
                }
              ],
              jsonAbiOld: {
                encoding: "1",
                types: [
                  [Object ...], [Object ...], [Object ...], [Object ...], [Object ...], [Object ...]
                ],
                functions: [
                  [Object ...]
                ],
                loggedTypes: [],
                messagesTypes: [],
                configurables: [],
              },
              jsonFnOld: {
                inputs: [
                  [Object ...], [Object ...]
                ],
                name: "main",
                output: {
                  name: "",
                  type: 5,
                  typeArguments: null,
                },
                attributes: [
                  [Object ...], [Object ...], [Object ...], [Object ...], [Object ...], [Object ...]
                ],
              },
              encodeArguments: [Function: encodeArguments],
              decodeArguments: [Function: decodeArguments],
              decodeOutput: [Function: decodeOutput],
              isReadOnly: [Function: isReadOnly],
            },
          },
          configurables: {},
          jsonAbi: {
            programType: "script",
            specVersion: "1",
            encodingVersion: "1",
            concreteTypes: [
              {
                type: "b256",
                concreteTypeId: "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b",
              },
              {
                type: "struct std::vec::Vec<u64>",
                concreteTypeId: "d5bfe1d4e1ace20166c9b50cadd47e862020561bde24f5189cfc2723f5ed76f4",
                metadataTypeId: 3,
                typeArguments: [ "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
                ],
              }, {
                type: "u64",
                concreteTypeId: "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
              }
            ],
            metadataTypes: [
              {
                type: "generic T",
                metadataTypeId: 0,
              }, {
                type: "raw untyped ptr",
                metadataTypeId: 1,
              }, {
                type: "struct std::vec::RawVec",
                metadataTypeId: 2,
                components: [
                  [Object ...], [Object ...]
                ],
                typeParameters: [ 0 ],
              }, {
                type: "struct std::vec::Vec",
                metadataTypeId: 3,
                components: [
                  [Object ...], [Object ...]
                ],
                typeParameters: [ 0 ],
              }
            ],
            functions: [
              {
                inputs: [
                  [Object ...], [Object ...]
                ],
                name: "main",
                output: "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b",
                attributes: [
                  [Object ...], [Object ...], [Object ...], [Object ...], [Object ...], [Object ...]
                ],
              }
            ],
            loggedTypes: [],
            messagesTypes: [],
            configurables: [],
          },
          encoding: "1",
          jsonAbiOld: {
            encoding: "1",
            types: [
              {
                typeId: 0,
                type: "generic T",
                components: null,
                typeParameters: null,
              }, {
                typeId: 1,
                type: "raw untyped ptr",
                components: null,
                typeParameters: null,
              }, {
                typeId: 2,
                type: "struct std::vec::RawVec",
                components: [
                  [Object ...], [Object ...]
                ],
                typeParameters: [ 0 ],
              }, {
                typeId: 3,
                type: "struct std::vec::Vec",
                components: [
                  [Object ...], [Object ...]
                ],
                typeParameters: [ 0 ],
              }, {
                typeId: 4,
                type: "u64",
                components: null,
                concreteTypeId: "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
                typeParameters: null,
                originalConcreteTypeId: "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
              },
              {
                typeId: 5,
                type: "b256",
                components: null,
                concreteTypeId: "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b",
                typeParameters: null,
                originalConcreteTypeId: "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b",
              }
            ],
            functions: [
              {
                inputs: [
                  [Object ...], [Object ...]
                ],
                name: "main",
                output: {
                  name: "",
                  type: 5,
                  typeArguments: null,
                },
                attributes: [
                  [Object ...], [Object ...], [Object ...], [Object ...], [Object ...], [Object ...]
                ],
              }
            ],
            loggedTypes: [],
            messagesTypes: [],
            configurables: [],
          },
          getFunction: [Function: getFunction],
          decodeFunctionResult: [Function: decodeFunctionResult],
          decodeLog: [Function: decodeLog],
          encodeConfigurable: [Function: encodeConfigurable],
          encodeType: [Function: encodeType],
          decodeType: [Function: decodeType],
        },
        account: WalletUnlocked {
          address: Address {
            bech32Address: "fuel1dd3cqn8mlxzku689kmn6au3cmjp3rmz4hmqymam5qqaze9hqgx8qtjpwn9",
            toAddress: [Function: toAddress],
            toB256: [Function: toB256],
            toBytes: [Function: toBytes],
            toHexString: [Function: toHexString],
            toString: [Function: toString],
            toJSON: [Function: toJSON],
            toEvmAddress: [Function: toEvmAddress],
            toAssetId: [Function: toAssetId],
            valueOf: [Function: valueOf],
            equals: [Function: equals],
          },
          _provider: _Provider {
            url: "http://127.0.0.1:4000/v1/graphql",
            operations: {
              getVersion: [Function: getVersion],
              getNodeInfo: [Function: getNodeInfo],
              getChain: [Function: getChain],
              getTransaction: [Function: getTransaction],
              getTransactionWithReceipts: [Function: getTransactionWithReceipts],
              getTransactions: [Function: getTransactions],
              getTransactionsByOwner: [Function: getTransactionsByOwner],
              estimatePredicates: [Function: estimatePredicates],
              getBlock: [Function: getBlock],
              getBlockWithTransactions: [Function: getBlockWithTransactions],
              getBlocks: [Function: getBlocks],
              getCoin: [Function: getCoin],
              getCoins: [Function: getCoins],
              getCoinsToSpend: [Function: getCoinsToSpend],
              getContract: [Function: getContract],
              getContractBalance: [Function: getContractBalance],
              getBalance: [Function: getBalance],
              getLatestGasPrice: [Function: getLatestGasPrice],
              estimateGasPrice: [Function: estimateGasPrice],
              getBalances: [Function: getBalances],
              getMessages: [Function: getMessages],
              getMessageProof: [Function: getMessageProof],
              getMessageStatus: [Function: getMessageStatus],
              getRelayedTransactionStatus: [Function: getRelayedTransactionStatus],
              dryRun: [Function: dryRun],
              submit: [Function: submit],
              produceBlocks: [Function: produceBlocks],
              getMessageByNonce: [Function: getMessageByNonce],
              submitAndAwait: [Function: submitAndAwait],
              statusChange: [Function: statusChange],
            },
            cache: ResourceCache {
              ttl: 20000,
              set: [Function: set],
              unset: [Function: unset],
              getActiveData: [Function: getActiveData],
              isCached: [Function: isCached],
              clear: [Function: clear],
            },
            options: {
              timeout: undefined,
              resourceCacheTTL: undefined,
              fetch: undefined,
              retryOptions: undefined,
            },
            getChain: [Function: getChain],
            getNode: [Function: getNode],
            getGasConfig: [Function: getGasConfig],
            connect: [Function: connect],
            fetchChainAndNodeInfo: [Function: fetchChainAndNodeInfo],
            createOperations: [Function: createOperations],
            getVersion: [Function: getVersion],
            getBlockNumber: [Function: getBlockNumber],
            fetchNode: [Function: fetchNode],
            fetchChain: [Function: fetchChain],
            getChainId: [Function: getChainId],
            getBaseAssetId: [Function: getBaseAssetId],
            validateTransaction: [Function: validateTransaction],
            sendTransaction: [Function: sendTransaction],
            dryRun: [Function: dryRun],
            estimatePredicates: [Function: estimatePredicates],
            estimateTxDependencies: [Function: estimateTxDependencies],
            estimateMultipleTxDependencies: [Function: estimateMultipleTxDependencies],
            dryRunMultipleTransactions: [Function: dryRunMultipleTransactions],
            estimateTxGasAndFee: [Function: estimateTxGasAndFee],
            simulate: [Function: simulate],
            getTransactionCost: [Function: getTransactionCost],
            getCoins: [Function: getCoins],
            getResourcesToSpend: [Function: getResourcesToSpend],
            getBlock: [Function: getBlock],
            getBlocks: [Function: getBlocks],
            getBlockWithTransactions: [Function: getBlockWithTransactions],
            getTransaction: [Function: getTransaction],
            getTransactions: [Function: getTransactions],
            getContract: [Function: getContract],
            getContractBalance: [Function: getContractBalance],
            getBalance: [Function: getBalance],
            getBalances: [Function: getBalances],
            getMessages: [Function: getMessages],
            getMessageProof: [Function: getMessageProof],
            getLatestGasPrice: [Function: getLatestGasPrice],
            estimateGasPrice: [Function: estimateGasPrice],
            getMessageStatus: [Function: getMessageStatus],
            produceBlocks: [Function: produceBlocks],
            getTransactionResponse: [Function: getTransactionResponse],
            getMessageByNonce: [Function: getMessageByNonce],
            getRelayedTransactionStatus: [Function: getRelayedTransactionStatus],
            validatePaginationArgs: [Function: validatePaginationArgs],
            extractDryRunError: [Function: extractDryRunError],
          },
          _connector: undefined,
          signer: [Function],
          lock: [Function: lock],
          privateKey: [Getter],
          publicKey: [Getter],
          signMessage: [Function: signMessage],
          signTransaction: [Function: signTransaction],
          populateTransactionWitnessesSignature: [Function: populateTransactionWitnessesSignature],
          sendTransaction: [Function: sendTransaction],
          simulateTransaction: [Function: simulateTransaction],
          encrypt: [Function: encrypt],
          provider: [Getter/Setter],
          connect: [Function: connect],
          getResourcesToSpend: [Function: getResourcesToSpend],
          getCoins: [Function: getCoins],
          getMessages: [Function: getMessages],
          getBalance: [Function: getBalance],
          getBalances: [Function: getBalances],
          fund: [Function: fund],
          createTransfer: [Function: createTransfer],
          transfer: [Function: transfer],
          batchTransfer: [Function: batchTransfer],
          addTransfer: [Function: addTransfer],
          addBatchTransfer: [Function: addBatchTransfer],
          transferToContract: [Function: transferToContract],
          withdrawToBaseLayer: [Function: withdrawToBaseLayer],
          getTransactionCost: [Function: getTransactionCost],
          generateFakeResources: [Function: generateFakeResources],
          validateTransferAmount: [Function: validateTransferAmount],
          estimateAndFundTransaction: [Function: estimateAndFundTransaction],
          validateGasLimitAndMaxFee: [Function: validateGasLimitAndMaxFee],
        },
        script: undefined,
        provider: _Provider {
          url: "http://127.0.0.1:4000/v1/graphql",
          operations: {
            getVersion: [Function: getVersion],
            getNodeInfo: [Function: getNodeInfo],
            getChain: [Function: getChain],
            getTransaction: [Function: getTransaction],
            getTransactionWithReceipts: [Function: getTransactionWithReceipts],
            getTransactions: [Function: getTransactions],
            getTransactionsByOwner: [Function: getTransactionsByOwner],
            estimatePredicates: [Function: estimatePredicates],
            getBlock: [Function: getBlock],
            getBlockWithTransactions: [Function: getBlockWithTransactions],
            getBlocks: [Function: getBlocks],
            getCoin: [Function: getCoin],
            getCoins: [Function: getCoins],
            getCoinsToSpend: [Function: getCoinsToSpend],
            getContract: [Function: getContract],
            getContractBalance: [Function: getContractBalance],
            getBalance: [Function: getBalance],
            getLatestGasPrice: [Function: getLatestGasPrice],
            estimateGasPrice: [Function: estimateGasPrice],
            getBalances: [Function: getBalances],
            getMessages: [Function: getMessages],
            getMessageProof: [Function: getMessageProof],
            getMessageStatus: [Function: getMessageStatus],
            getRelayedTransactionStatus: [Function: getRelayedTransactionStatus],
            dryRun: [Function: dryRun],
            submit: [Function: submit],
            produceBlocks: [Function: produceBlocks],
            getMessageByNonce: [Function: getMessageByNonce],
            submitAndAwait: [Function: submitAndAwait],
            statusChange: [Function: statusChange],
          },
          cache: ResourceCache {
            ttl: 20000,
            set: [Function: set],
            unset: [Function: unset],
            getActiveData: [Function: getActiveData],
            isCached: [Function: isCached],
            clear: [Function: clear],
          },
          options: {
            timeout: undefined,
            resourceCacheTTL: undefined,
            fetch: undefined,
            retryOptions: undefined,
          },
          getChain: [Function: getChain],
          getNode: [Function: getNode],
          getGasConfig: [Function: getGasConfig],
          connect: [Function: connect],
          fetchChainAndNodeInfo: [Function: fetchChainAndNodeInfo],
          createOperations: [Function: createOperations],
          getVersion: [Function: getVersion],
          getBlockNumber: [Function: getBlockNumber],
          fetchNode: [Function: fetchNode],
          fetchChain: [Function: fetchChain],
          getChainId: [Function: getChainId],
          getBaseAssetId: [Function: getBaseAssetId],
          validateTransaction: [Function: validateTransaction],
          sendTransaction: [Function: sendTransaction],
          dryRun: [Function: dryRun],
          estimatePredicates: [Function: estimatePredicates],
          estimateTxDependencies: [Function: estimateTxDependencies],
          estimateMultipleTxDependencies: [Function: estimateMultipleTxDependencies],
          dryRunMultipleTransactions: [Function: dryRunMultipleTransactions],
          estimateTxGasAndFee: [Function: estimateTxGasAndFee],
          simulate: [Function: simulate],
          getTransactionCost: [Function: getTransactionCost],
          getCoins: [Function: getCoins],
          getResourcesToSpend: [Function: getResourcesToSpend],
          getBlock: [Function: getBlock],
          getBlocks: [Function: getBlocks],
          getBlockWithTransactions: [Function: getBlockWithTransactions],
          getTransaction: [Function: getTransaction],
          getTransactions: [Function: getTransactions],
          getContract: [Function: getContract],
          getContractBalance: [Function: getContractBalance],
          getBalance: [Function: getBalance],
          getBalances: [Function: getBalances],
          getMessages: [Function: getMessages],
          getMessageProof: [Function: getMessageProof],
          getLatestGasPrice: [Function: getLatestGasPrice],
          estimateGasPrice: [Function: estimateGasPrice],
          getMessageStatus: [Function: getMessageStatus],
          produceBlocks: [Function: produceBlocks],
          getTransactionResponse: [Function: getTransactionResponse],
          getMessageByNonce: [Function: getMessageByNonce],
          getRelayedTransactionStatus: [Function: getRelayedTransactionStatus],
          validatePaginationArgs: [Function: validatePaginationArgs],
          extractDryRunError: [Function: extractDryRunError],
        },
        functions: {
          main: [Function: main],
        },
        setConfigurableConstants: [Function: setConfigurableConstants],
      },
      functionInvocationScopes: [Circular],
      txParameters: undefined,
      requiredCoins: [],
      isMultiCall: false,
      hasCallParamsGasLimit: true,
      externalAbis: {},
      addSignersCallback: undefined,
      func: FunctionFragment {
        signature: "main(s<u64>(s<u64>(rawptr,u64),u64),s<u64>(s<u64>(rawptr,u64),u64))",
        selector: "0x00000000863bff4b",
        selectorBytes: Uint8Array(12) [ 0, 0, 0, 0, 0, 0, 0, 4, 109, 97, 105, 110 ],
        encoding: "1",
        name: "main",
        jsonFn: {
          inputs: [
            {
              name: "input_tx_idxs",
              concreteTypeId: "d5bfe1d4e1ace20166c9b50cadd47e862020561bde24f5189cfc2723f5ed76f4",
            },
            {
              name: "output_tx_idxs",
              concreteTypeId: "d5bfe1d4e1ace20166c9b50cadd47e862020561bde24f5189cfc2723f5ed76f4",
            }
          ],
          name: "main",
          output: "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b",
          attributes: [
            {
              name: "doc-comment",
              arguments: [ " extract inputs, and outputs" ],
            }, {
              name: "doc-comment",
              arguments: [ " extract the script bytecode hash" ],
            }, {
              name: "doc-comment",
              arguments: [ " calculate the tranasaction hash based on that" ],
            }, {
              name: "doc-comment",
              arguments: [ "" ],
            }, {
              name: "doc-comment",
              arguments: [ " V0, user can only sign over a single input and single output { only of type coin }"
              ],
            }, {
              name: "doc-comment",
              arguments: [ " txn_hash = sha_256([[input_tx_id_bytes], [hash_of_serialized_output_type_coin]], [script_bytecodehash_bytes])"
              ],
            }
          ],
        },
        attributes: [
          {
            name: "doc-comment",
            arguments: [ " extract inputs, and outputs" ],
          }, {
            name: "doc-comment",
            arguments: [ " extract the script bytecode hash" ],
          }, {
            name: "doc-comment",
            arguments: [ " calculate the tranasaction hash based on that" ],
          }, {
            name: "doc-comment",
            arguments: [ "" ],
          }, {
            name: "doc-comment",
            arguments: [ " V0, user can only sign over a single input and single output { only of type coin }"
            ],
          }, {
            name: "doc-comment",
            arguments: [ " txn_hash = sha_256([[input_tx_id_bytes], [hash_of_serialized_output_type_coin]], [script_bytecodehash_bytes])"
            ],
          }
        ],
        jsonAbiOld: {
          encoding: "1",
          types: [
            {
              typeId: 0,
              type: "generic T",
              components: null,
              typeParameters: null,
            }, {
              typeId: 1,
              type: "raw untyped ptr",
              components: null,
              typeParameters: null,
            }, {
              typeId: 2,
              type: "struct std::vec::RawVec",
              components: [
                {
                  name: "ptr",
                  type: 1,
                  typeArguments: null,
                }, {
                  name: "cap",
                  type: 4,
                  typeArguments: null,
                }
              ],
              typeParameters: [ 0 ],
            }, {
              typeId: 3,
              type: "struct std::vec::Vec",
              components: [
                {
                  name: "buf",
                  type: 2,
                  typeArguments: [
                    [Object ...]
                  ],
                }, {
                  name: "len",
                  type: 4,
                  typeArguments: null,
                }
              ],
              typeParameters: [ 0 ],
            }, {
              typeId: 4,
              type: "u64",
              components: null,
              concreteTypeId: "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
              typeParameters: null,
              originalConcreteTypeId: "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
            },
            {
              typeId: 5,
              type: "b256",
              components: null,
              concreteTypeId: "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b",
              typeParameters: null,
              originalConcreteTypeId: "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b",
            }
          ],
          functions: [
            {
              inputs: [
                {
                  name: "input_tx_idxs",
                  type: 3,
                  typeArguments: [
                    [Object ...]
                  ],
                }, {
                  name: "output_tx_idxs",
                  type: 3,
                  typeArguments: [
                    [Object ...]
                  ],
                }
              ],
              name: "main",
              output: {
                name: "",
                type: 5,
                typeArguments: null,
              },
              attributes: [
                {
                  name: "doc-comment",
                  arguments: [ " extract inputs, and outputs" ],
                }, {
                  name: "doc-comment",
                  arguments: [ " extract the script bytecode hash" ],
                }, {
                  name: "doc-comment",
                  arguments: [ " calculate the tranasaction hash based on that" ],
                },
                {
                  name: "doc-comment",
                  arguments: [ "" ],
                }, {
                  name: "doc-comment",
                  arguments: [ " V0, user can only sign over a single input and single output { only of type coin }"
                  ],
                }, {
                  name: "doc-comment",
                  arguments: [ " txn_hash = sha_256([[input_tx_id_bytes], [hash_of_serialized_output_type_coin]], [script_bytecodehash_bytes])"
                  ],
                }
              ],
            }
          ],
          loggedTypes: [],
          messagesTypes: [],
          configurables: [],
        },
        jsonFnOld: {
          inputs: [
            {
              name: "input_tx_idxs",
              type: 3,
              typeArguments: [
                {
                  name: "",
                  type: 4,
                  typeArguments: null,
                }
              ],
            }, {
              name: "output_tx_idxs",
              type: 3,
              typeArguments: [
                {
                  name: "",
                  type: 4,
                  typeArguments: null,
                }
              ],
            }
          ],
          name: "main",
          output: {
            name: "",
            type: 5,
            typeArguments: null,
          },
          attributes: [
            {
              name: "doc-comment",
              arguments: [ " extract inputs, and outputs" ],
            }, {
              name: "doc-comment",
              arguments: [ " extract the script bytecode hash" ],
            }, {
              name: "doc-comment",
              arguments: [ " calculate the tranasaction hash based on that" ],
            }, {
              name: "doc-comment",
              arguments: [ "" ],
            }, {
              name: "doc-comment",
              arguments: [ " V0, user can only sign over a single input and single output { only of type coin }"
              ],
            }, {
              name: "doc-comment",
              arguments: [ " txn_hash = sha_256([[input_tx_id_bytes], [hash_of_serialized_output_type_coin]], [script_bytecodehash_bytes])"
              ],
            }
          ],
        },
        encodeArguments: [Function: encodeArguments],
        decodeArguments: [Function: decodeArguments],
        decodeOutput: [Function: decodeOutput],
        isReadOnly: [Function: isReadOnly],
      },
      callParameters: {
        gasLimit: 100000,
      },
      forward: undefined,
      args: [
        [ 0 ], [ 0 ]
      ],
      scriptRequest: ScriptRequest {
        bytes: Uint8Array(4360) [ 26, 240, 48, 0, 116, 0, 0, 2, 0, 0, 0, 0, 0, 0, 16, 216, 93, 255, 192, 1, 16, 255, 255, 0, 26, 236, 80, 0, 145, 0, 3, 208, 80, 83, 178, 88, 97, 64, 0, 10, 95, 237, 0, 117, 97, 64, 0, 4, 95, 237, 0, 106, 80, 67, 179, 168, 80, 71, 176, 224, 114, 72, 0, 8, 40, 69, 4, 128, 80, 75, 178, 152, 114, 64, 0, 8, 40, 73, 20, 0, 80, 67, 179, 136, 114, 68, 0, 8, 40, 65, 36, 64, 80, 67, 179, 136, 80, 71, 178, 8, 26, 233, 0, 0, 26, 229, 16, 0, 32, 248, 51, 0, 88, 251, 224, 2, 80, 251, 224, 4, 116, 0, 0, 151, 26, 71, 208, 0, 114, 72, 0, 24, 40, 237, 20, 128, 80, 71, 178, 32, 26, 233, 0, 0, 26, 229, 16, 0, 32, 248, 51, 0, 88, 251, 224, 2, 80, 251, 224, 4, 116, 0, 0, 141, 26, 67, 208, 0, 80, 71, 176, 24, 114, 72, 0, 24, 40, 69, 4, 128, 80, 67, 176, 232, 114, 72, 0, 24, 40, 67, 180, 128, 80, 73, 0, 24, 114, 76, 0, 24, 40, 73, 20, 192, 80, 71, 178, 160, 114, 72, 0, 48, 40, 69, 4, 128, 80, 67, 178, 208, 114, 72, 0, 48, 40, 65, 20, 128, 80, 71, 179, 88, 114, 72, 0, 48, 40, 69, 4, 128, 80, 67, 179, 88, 80, 71, 179, 88, 80, 69, 16, 24, 80, 75, 178, 104, 114, 76, 0, 24, 40, 73, 4, 192, 80, 67, 178, 128, 114, 76, 0, 24, 40, 65, 20, 192, 80, 71, 178, 56, 26, 233, 32, 0, 26, 229, 0, 0, 26, 225, 16, 0, 32, 248, 51, 0, 88, 251, 224, 2, 80, 251, 224, 4, 116, 0, 1, 12, 26, 67, 208, 0, 80, 71, 176, 48, 114, 72, 0, 32, 40, 69, 4, 128, 80, 67, 179, 176, 114, 72, 0, 32, 40, 65, 20, 128, 80, 67, 179, 176, 80, 71, 176, 128, 114, 72, 0, 32, 40, 69, 4, 128, 114, 64, 4, 0, 38, 64, 0, 0, 26, 64, 112, 0, 80, 75, 177, 48, 95, 237, 0, 38, 114, 64, 4, 0, 95, 237, 0, 39, 95, 236, 0, 40, 80, 67, 176, 80, 114, 76, 0, 24, 40, 65, 36, 192, 80, 75, 177, 96, 114, 76, 0, 24, 40, 73, 4, 192, 80, 67, 179, 0, 114, 76, 0, 24, 40, 65, 36, 192, 80, 75, 177, 216, 114, 76, 0, 24, 40, 73, 4, 192, 80, 67, 176, 104, 114, 76, 0, 24, 40, 65, 36, 192, 80, 75, 177, 24, 114, 76, 0, 24, 40, 73, 4, 192, 93, 87, 176, 35, 93, 79, 176, 36, 93, 67, 176, 37, 114, 72, 0, 32, 16, 73, 4, 128, 21, 73, 36, 192, 118, 72, 0, 1, 116, 0, 0, 5, 114, 72, 0, 2, 27, 77, 52, 128, 38, 76, 0, 0, 40, 29, 84, 0, 26, 84, 112, 0, 80, 75, 177, 120, 114, ... 3847 more ],
        scriptDataEncoder: [Function],
        scriptResultDecoder: [Function],
        getScriptDataOffset: [Function: getScriptDataOffset],
        encodeScriptData: [Function: encodeScriptData],
        decodeCallResult: [Function: decodeCallResult],
      },
      updateScriptRequest: [Function: updateScriptRequest],
      buildScriptRequest: [Function: buildScriptRequest],
      getCallConfig: [Function: getCallConfig],
      setArguments: [Function: setArguments],
      callParams: [Function: callParams],
      calls: [Getter],
      updateContractInputAndOutput: [Function: updateContractInputAndOutput],
      getRequiredCoins: [Function: getRequiredCoins],
      updateRequiredCoins: [Function: updateRequiredCoins],
      addCall: [Function: addCall],
      addCalls: [Function: addCalls],
      prepareTransaction: [Function: prepareTransaction],
      checkGasLimitTotal: [Function: checkGasLimitTotal],
      getTransactionCost: [Function: getTransactionCost],
      fundWithRequiredCoins: [Function: fundWithRequiredCoins],
      txParams: [Function: txParams],
      addContracts: [Function: addContracts],
      addTransfer: [Function: addTransfer],
      addBatchTransfer: [Function: addBatchTransfer],
      addSigners: [Function: addSigners],
      getTransactionRequest: [Function: getTransactionRequest],
      call: [Function: call],
      simulate: [Function: simulate],
      dryRun: [Function: dryRun],
      get: [Function: get],
      getProvider: [Function: getProvider],
      getTransactionId: [Function: getTransactionId],
      setDefaultTxParams: [Function: setDefaultTxParams],
    }
  ],
  value: "0x07ba6dd0e7a540d05a98f179aa4e90bc5b3bcdd8441080fd037d369c3740f942",
  program: DbgExample {
    bytes: Uint8Array(4360) [ 26, 240, 48, 0, 116, 0, 0, 2, 0, 0, 0, 0, 0, 0, 16, 216, 93, 255, 192, 1, 16, 255, 255, 0, 26, 236, 80, 0, 145, 0, 3, 208, 80, 83, 178, 88, 97, 64, 0, 10, 95, 237, 0, 117, 97, 64, 0, 4, 95, 237, 0, 106, 80, 67, 179, 168, 80, 71, 176, 224, 114, 72, 0, 8, 40, 69, 4, 128, 80, 75, 178, 152, 114, 64, 0, 8, 40, 73, 20, 0, 80, 67, 179, 136, 114, 68, 0, 8, 40, 65, 36, 64, 80, 67, 179, 136, 80, 71, 178, 8, 26, 233, 0, 0, 26, 229, 16, 0, 32, 248, 51, 0, 88, 251, 224, 2, 80, 251, 224, 4, 116, 0, 0, 151, 26, 71, 208, 0, 114, 72, 0, 24, 40, 237, 20, 128, 80, 71, 178, 32, 26, 233, 0, 0, 26, 229, 16, 0, 32, 248, 51, 0, 88, 251, 224, 2, 80, 251, 224, 4, 116, 0, 0, 141, 26, 67, 208, 0, 80, 71, 176, 24, 114, 72, 0, 24, 40, 69, 4, 128, 80, 67, 176, 232, 114, 72, 0, 24, 40, 67, 180, 128, 80, 73, 0, 24, 114, 76, 0, 24, 40, 73, 20, 192, 80, 71, 178, 160, 114, 72, 0, 48, 40, 69, 4, 128, 80, 67, 178, 208, 114, 72, 0, 48, 40, 65, 20, 128, 80, 71, 179, 88, 114, 72, 0, 48, 40, 69, 4, 128, 80, 67, 179, 88, 80, 71, 179, 88, 80, 69, 16, 24, 80, 75, 178, 104, 114, 76, 0, 24, 40, 73, 4, 192, 80, 67, 178, 128, 114, 76, 0, 24, 40, 65, 20, 192, 80, 71, 178, 56, 26, 233, 32, 0, 26, 229, 0, 0, 26, 225, 16, 0, 32, 248, 51, 0, 88, 251, 224, 2, 80, 251, 224, 4, 116, 0, 1, 12, 26, 67, 208, 0, 80, 71, 176, 48, 114, 72, 0, 32, 40, 69, 4, 128, 80, 67, 179, 176, 114, 72, 0, 32, 40, 65, 20, 128, 80, 67, 179, 176, 80, 71, 176, 128, 114, 72, 0, 32, 40, 69, 4, 128, 114, 64, 4, 0, 38, 64, 0, 0, 26, 64, 112, 0, 80, 75, 177, 48, 95, 237, 0, 38, 114, 64, 4, 0, 95, 237, 0, 39, 95, 236, 0, 40, 80, 67, 176, 80, 114, 76, 0, 24, 40, 65, 36, 192, 80, 75, 177, 96, 114, 76, 0, 24, 40, 73, 4, 192, 80, 67, 179, 0, 114, 76, 0, 24, 40, 65, 36, 192, 80, 75, 177, 216, 114, 76, 0, 24, 40, 73, 4, 192, 80, 67, 176, 104, 114, 76, 0, 24, 40, 65, 36, 192, 80, 75, 177, 24, 114, 76, 0, 24, 40, 73, 4, 192, 93, 87, 176, 35, 93, 79, 176, 36, 93, 67, 176, 37, 114, 72, 0, 32, 16, 73, 4, 128, 21, 73, 36, 192, 118, 72, 0, 1, 116, 0, 0, 5, 114, 72, 0, 2, 27, 77, 52, 128, 38, 76, 0, 0, 40, 29, 84, 0, 26, 84, 112, 0, 80, 75, 177, 120, 114, ... 3847 more ],
    interface: Interface {
      functions: {
        main: FunctionFragment {
          signature: "main(s<u64>(s<u64>(rawptr,u64),u64),s<u64>(s<u64>(rawptr,u64),u64))",
          selector: "0x00000000863bff4b",
          selectorBytes: Uint8Array(12) [ 0, 0, 0, 0, 0, 0, 0, 4, 109, 97, 105, 110 ],
          encoding: "1",
          name: "main",
          jsonFn: {
            inputs: [
              {
                name: "input_tx_idxs",
                concreteTypeId: "d5bfe1d4e1ace20166c9b50cadd47e862020561bde24f5189cfc2723f5ed76f4",
              },
              {
                name: "output_tx_idxs",
                concreteTypeId: "d5bfe1d4e1ace20166c9b50cadd47e862020561bde24f5189cfc2723f5ed76f4",
              }
            ],
            name: "main",
            output: "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b",
            attributes: [
              {
                name: "doc-comment",
                arguments: [ " extract inputs, and outputs" ],
              }, {
                name: "doc-comment",
                arguments: [ " extract the script bytecode hash" ],
              }, {
                name: "doc-comment",
                arguments: [ " calculate the tranasaction hash based on that" ],
              },
              {
                name: "doc-comment",
                arguments: [ "" ],
              }, {
                name: "doc-comment",
                arguments: [ " V0, user can only sign over a single input and single output { only of type coin }"
                ],
              }, {
                name: "doc-comment",
                arguments: [ " txn_hash = sha_256([[input_tx_id_bytes], [hash_of_serialized_output_type_coin]], [script_bytecodehash_bytes])"
                ],
              }
            ],
          },
          attributes: [
            {
              name: "doc-comment",
              arguments: [ " extract inputs, and outputs" ],
            }, {
              name: "doc-comment",
              arguments: [ " extract the script bytecode hash" ],
            }, {
              name: "doc-comment",
              arguments: [ " calculate the tranasaction hash based on that" ],
            }, {
              name: "doc-comment",
              arguments: [ "" ],
            }, {
              name: "doc-comment",
              arguments: [ " V0, user can only sign over a single input and single output { only of type coin }"
              ],
            }, {
              name: "doc-comment",
              arguments: [ " txn_hash = sha_256([[input_tx_id_bytes], [hash_of_serialized_output_type_coin]], [script_bytecodehash_bytes])"
              ],
            }
          ],
          jsonAbiOld: {
            encoding: "1",
            types: [
              {
                typeId: 0,
                type: "generic T",
                components: null,
                typeParameters: null,
              }, {
                typeId: 1,
                type: "raw untyped ptr",
                components: null,
                typeParameters: null,
              }, {
                typeId: 2,
                type: "struct std::vec::RawVec",
                components: [
                  [Object ...], [Object ...]
                ],
                typeParameters: [ 0 ],
              }, {
                typeId: 3,
                type: "struct std::vec::Vec",
                components: [
                  [Object ...], [Object ...]
                ],
                typeParameters: [ 0 ],
              }, {
                typeId: 4,
                type: "u64",
                components: null,
                concreteTypeId: "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
                typeParameters: null,
                originalConcreteTypeId: "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
              },
              {
                typeId: 5,
                type: "b256",
                components: null,
                concreteTypeId: "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b",
                typeParameters: null,
                originalConcreteTypeId: "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b",
              }
            ],
            functions: [
              {
                inputs: [
                  [Object ...], [Object ...]
                ],
                name: "main",
                output: {
                  name: "",
                  type: 5,
                  typeArguments: null,
                },
                attributes: [
                  [Object ...], [Object ...], [Object ...], [Object ...], [Object ...], [Object ...]
                ],
              }
            ],
            loggedTypes: [],
            messagesTypes: [],
            configurables: [],
          },
          jsonFnOld: {
            inputs: [
              {
                name: "input_tx_idxs",
                type: 3,
                typeArguments: [
                  [Object ...]
                ],
              }, {
                name: "output_tx_idxs",
                type: 3,
                typeArguments: [
                  [Object ...]
                ],
              }
            ],
            name: "main",
            output: {
              name: "",
              type: 5,
              typeArguments: null,
            },
            attributes: [
              {
                name: "doc-comment",
                arguments: [ " extract inputs, and outputs" ],
              }, {
                name: "doc-comment",
                arguments: [ " extract the script bytecode hash" ],
              }, {
                name: "doc-comment",
                arguments: [ " calculate the tranasaction hash based on that" ],
              },
              {
                name: "doc-comment",
                arguments: [ "" ],
              }, {
                name: "doc-comment",
                arguments: [ " V0, user can only sign over a single input and single output { only of type coin }"
                ],
              }, {
                name: "doc-comment",
                arguments: [ " txn_hash = sha_256([[input_tx_id_bytes], [hash_of_serialized_output_type_coin]], [script_bytecodehash_bytes])"
                ],
              }
            ],
          },
          encodeArguments: [Function: encodeArguments],
          decodeArguments: [Function: decodeArguments],
          decodeOutput: [Function: decodeOutput],
          isReadOnly: [Function: isReadOnly],
        },
      },
      configurables: {},
      jsonAbi: {
        programType: "script",
        specVersion: "1",
        encodingVersion: "1",
        concreteTypes: [
          {
            type: "b256",
            concreteTypeId: "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b",
          },
          {
            type: "struct std::vec::Vec<u64>",
            concreteTypeId: "d5bfe1d4e1ace20166c9b50cadd47e862020561bde24f5189cfc2723f5ed76f4",
            metadataTypeId: 3,
            typeArguments: [ "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
            ],
          }, {
            type: "u64",
            concreteTypeId: "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
          }
        ],
        metadataTypes: [
          {
            type: "generic T",
            metadataTypeId: 0,
          }, {
            type: "raw untyped ptr",
            metadataTypeId: 1,
          }, {
            type: "struct std::vec::RawVec",
            metadataTypeId: 2,
            components: [
              {
                name: "ptr",
                typeId: 1,
              }, {
                name: "cap",
                typeId: "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
              }
            ],
            typeParameters: [ 0 ],
          }, {
            type: "struct std::vec::Vec",
            metadataTypeId: 3,
            components: [
              {
                name: "buf",
                typeId: 2,
                typeArguments: [
                  [Object ...]
                ],
              }, {
                name: "len",
                typeId: "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
              }
            ],
            typeParameters: [ 0 ],
          }
        ],
        functions: [
          {
            inputs: [
              {
                name: "input_tx_idxs",
                concreteTypeId: "d5bfe1d4e1ace20166c9b50cadd47e862020561bde24f5189cfc2723f5ed76f4",
              },
              {
                name: "output_tx_idxs",
                concreteTypeId: "d5bfe1d4e1ace20166c9b50cadd47e862020561bde24f5189cfc2723f5ed76f4",
              }
            ],
            name: "main",
            output: "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b",
            attributes: [
              {
                name: "doc-comment",
                arguments: [ " extract inputs, and outputs" ],
              }, {
                name: "doc-comment",
                arguments: [ " extract the script bytecode hash" ],
              }, {
                name: "doc-comment",
                arguments: [ " calculate the tranasaction hash based on that" ],
              },
              {
                name: "doc-comment",
                arguments: [ "" ],
              }, {
                name: "doc-comment",
                arguments: [ " V0, user can only sign over a single input and single output { only of type coin }"
                ],
              }, {
                name: "doc-comment",
                arguments: [ " txn_hash = sha_256([[input_tx_id_bytes], [hash_of_serialized_output_type_coin]], [script_bytecodehash_bytes])"
                ],
              }
            ],
          }
        ],
        loggedTypes: [],
        messagesTypes: [],
        configurables: [],
      },
      encoding: "1",
      jsonAbiOld: {
        encoding: "1",
        types: [
          {
            typeId: 0,
            type: "generic T",
            components: null,
            typeParameters: null,
          }, {
            typeId: 1,
            type: "raw untyped ptr",
            components: null,
            typeParameters: null,
          }, {
            typeId: 2,
            type: "struct std::vec::RawVec",
            components: [
              {
                name: "ptr",
                type: 1,
                typeArguments: null,
              }, {
                name: "cap",
                type: 4,
                typeArguments: null,
              }
            ],
            typeParameters: [ 0 ],
          }, {
            typeId: 3,
            type: "struct std::vec::Vec",
            components: [
              {
                name: "buf",
                type: 2,
                typeArguments: [
                  [Object ...]
                ],
              }, {
                name: "len",
                type: 4,
                typeArguments: null,
              }
            ],
            typeParameters: [ 0 ],
          }, {
            typeId: 4,
            type: "u64",
            components: null,
            concreteTypeId: "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
            typeParameters: null,
            originalConcreteTypeId: "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
          },
          {
            typeId: 5,
            type: "b256",
            components: null,
            concreteTypeId: "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b",
            typeParameters: null,
            originalConcreteTypeId: "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b",
          }
        ],
        functions: [
          {
            inputs: [
              {
                name: "input_tx_idxs",
                type: 3,
                typeArguments: [
                  [Object ...]
                ],
              }, {
                name: "output_tx_idxs",
                type: 3,
                typeArguments: [
                  [Object ...]
                ],
              }
            ],
            name: "main",
            output: {
              name: "",
              type: 5,
              typeArguments: null,
            },
            attributes: [
              {
                name: "doc-comment",
                arguments: [ " extract inputs, and outputs" ],
              }, {
                name: "doc-comment",
                arguments: [ " extract the script bytecode hash" ],
              }, {
                name: "doc-comment",
                arguments: [ " calculate the tranasaction hash based on that" ],
              },
              {
                name: "doc-comment",
                arguments: [ "" ],
              }, {
                name: "doc-comment",
                arguments: [ " V0, user can only sign over a single input and single output { only of type coin }"
                ],
              }, {
                name: "doc-comment",
                arguments: [ " txn_hash = sha_256([[input_tx_id_bytes], [hash_of_serialized_output_type_coin]], [script_bytecodehash_bytes])"
                ],
              }
            ],
          }
        ],
        loggedTypes: [],
        messagesTypes: [],
        configurables: [],
      },
      getFunction: [Function: getFunction],
      decodeFunctionResult: [Function: decodeFunctionResult],
      decodeLog: [Function: decodeLog],
      encodeConfigurable: [Function: encodeConfigurable],
      encodeType: [Function: encodeType],
      decodeType: [Function: decodeType],
    },
    account: WalletUnlocked {
      address: Address {
        bech32Address: "fuel1dd3cqn8mlxzku689kmn6au3cmjp3rmz4hmqymam5qqaze9hqgx8qtjpwn9",
        toAddress: [Function: toAddress],
        toB256: [Function: toB256],
        toBytes: [Function: toBytes],
        toHexString: [Function: toHexString],
        toString: [Function: toString],
        toJSON: [Function: toJSON],
        toEvmAddress: [Function: toEvmAddress],
        toAssetId: [Function: toAssetId],
        valueOf: [Function: valueOf],
        equals: [Function: equals],
      },
      _provider: _Provider {
        url: "http://127.0.0.1:4000/v1/graphql",
        operations: {
          getVersion: [Function: getVersion],
          getNodeInfo: [Function: getNodeInfo],
          getChain: [Function: getChain],
          getTransaction: [Function: getTransaction],
          getTransactionWithReceipts: [Function: getTransactionWithReceipts],
          getTransactions: [Function: getTransactions],
          getTransactionsByOwner: [Function: getTransactionsByOwner],
          estimatePredicates: [Function: estimatePredicates],
          getBlock: [Function: getBlock],
          getBlockWithTransactions: [Function: getBlockWithTransactions],
          getBlocks: [Function: getBlocks],
          getCoin: [Function: getCoin],
          getCoins: [Function: getCoins],
          getCoinsToSpend: [Function: getCoinsToSpend],
          getContract: [Function: getContract],
          getContractBalance: [Function: getContractBalance],
          getBalance: [Function: getBalance],
          getLatestGasPrice: [Function: getLatestGasPrice],
          estimateGasPrice: [Function: estimateGasPrice],
          getBalances: [Function: getBalances],
          getMessages: [Function: getMessages],
          getMessageProof: [Function: getMessageProof],
          getMessageStatus: [Function: getMessageStatus],
          getRelayedTransactionStatus: [Function: getRelayedTransactionStatus],
          dryRun: [Function: dryRun],
          submit: [Function: submit],
          produceBlocks: [Function: produceBlocks],
          getMessageByNonce: [Function: getMessageByNonce],
          submitAndAwait: [Function: submitAndAwait],
          statusChange: [Function: statusChange],
        },
        cache: ResourceCache {
          ttl: 20000,
          set: [Function: set],
          unset: [Function: unset],
          getActiveData: [Function: getActiveData],
          isCached: [Function: isCached],
          clear: [Function: clear],
        },
        options: {
          timeout: undefined,
          resourceCacheTTL: undefined,
          fetch: undefined,
          retryOptions: undefined,
        },
        getChain: [Function: getChain],
        getNode: [Function: getNode],
        getGasConfig: [Function: getGasConfig],
        connect: [Function: connect],
        fetchChainAndNodeInfo: [Function: fetchChainAndNodeInfo],
        createOperations: [Function: createOperations],
        getVersion: [Function: getVersion],
        getBlockNumber: [Function: getBlockNumber],
        fetchNode: [Function: fetchNode],
        fetchChain: [Function: fetchChain],
        getChainId: [Function: getChainId],
        getBaseAssetId: [Function: getBaseAssetId],
        validateTransaction: [Function: validateTransaction],
        sendTransaction: [Function: sendTransaction],
        dryRun: [Function: dryRun],
        estimatePredicates: [Function: estimatePredicates],
        estimateTxDependencies: [Function: estimateTxDependencies],
        estimateMultipleTxDependencies: [Function: estimateMultipleTxDependencies],
        dryRunMultipleTransactions: [Function: dryRunMultipleTransactions],
        estimateTxGasAndFee: [Function: estimateTxGasAndFee],
        simulate: [Function: simulate],
        getTransactionCost: [Function: getTransactionCost],
        getCoins: [Function: getCoins],
        getResourcesToSpend: [Function: getResourcesToSpend],
        getBlock: [Function: getBlock],
        getBlocks: [Function: getBlocks],
        getBlockWithTransactions: [Function: getBlockWithTransactions],
        getTransaction: [Function: getTransaction],
        getTransactions: [Function: getTransactions],
        getContract: [Function: getContract],
        getContractBalance: [Function: getContractBalance],
        getBalance: [Function: getBalance],
        getBalances: [Function: getBalances],
        getMessages: [Function: getMessages],
        getMessageProof: [Function: getMessageProof],
        getLatestGasPrice: [Function: getLatestGasPrice],
        estimateGasPrice: [Function: estimateGasPrice],
        getMessageStatus: [Function: getMessageStatus],
        produceBlocks: [Function: produceBlocks],
        getTransactionResponse: [Function: getTransactionResponse],
        getMessageByNonce: [Function: getMessageByNonce],
        getRelayedTransactionStatus: [Function: getRelayedTransactionStatus],
        validatePaginationArgs: [Function: validatePaginationArgs],
        extractDryRunError: [Function: extractDryRunError],
      },
      _connector: undefined,
      signer: [Function],
      lock: [Function: lock],
      privateKey: [Getter],
      publicKey: [Getter],
      signMessage: [Function: signMessage],
      signTransaction: [Function: signTransaction],
      populateTransactionWitnessesSignature: [Function: populateTransactionWitnessesSignature],
      sendTransaction: [Function: sendTransaction],
      simulateTransaction: [Function: simulateTransaction],
      encrypt: [Function: encrypt],
      provider: [Getter/Setter],
      connect: [Function: connect],
      getResourcesToSpend: [Function: getResourcesToSpend],
      getCoins: [Function: getCoins],
      getMessages: [Function: getMessages],
      getBalance: [Function: getBalance],
      getBalances: [Function: getBalances],
      fund: [Function: fund],
      createTransfer: [Function: createTransfer],
      transfer: [Function: transfer],
      batchTransfer: [Function: batchTransfer],
      addTransfer: [Function: addTransfer],
      addBatchTransfer: [Function: addBatchTransfer],
      transferToContract: [Function: transferToContract],
      withdrawToBaseLayer: [Function: withdrawToBaseLayer],
      getTransactionCost: [Function: getTransactionCost],
      generateFakeResources: [Function: generateFakeResources],
      validateTransferAmount: [Function: validateTransferAmount],
      estimateAndFundTransaction: [Function: estimateAndFundTransaction],
      validateGasLimitAndMaxFee: [Function: validateGasLimitAndMaxFee],
    },
    script: undefined,
    provider: _Provider {
      url: "http://127.0.0.1:4000/v1/graphql",
      operations: {
        getVersion: [Function: getVersion],
        getNodeInfo: [Function: getNodeInfo],
        getChain: [Function: getChain],
        getTransaction: [Function: getTransaction],
        getTransactionWithReceipts: [Function: getTransactionWithReceipts],
        getTransactions: [Function: getTransactions],
        getTransactionsByOwner: [Function: getTransactionsByOwner],
        estimatePredicates: [Function: estimatePredicates],
        getBlock: [Function: getBlock],
        getBlockWithTransactions: [Function: getBlockWithTransactions],
        getBlocks: [Function: getBlocks],
        getCoin: [Function: getCoin],
        getCoins: [Function: getCoins],
        getCoinsToSpend: [Function: getCoinsToSpend],
        getContract: [Function: getContract],
        getContractBalance: [Function: getContractBalance],
        getBalance: [Function: getBalance],
        getLatestGasPrice: [Function: getLatestGasPrice],
        estimateGasPrice: [Function: estimateGasPrice],
        getBalances: [Function: getBalances],
        getMessages: [Function: getMessages],
        getMessageProof: [Function: getMessageProof],
        getMessageStatus: [Function: getMessageStatus],
        getRelayedTransactionStatus: [Function: getRelayedTransactionStatus],
        dryRun: [Function: dryRun],
        submit: [Function: submit],
        produceBlocks: [Function: produceBlocks],
        getMessageByNonce: [Function: getMessageByNonce],
        submitAndAwait: [Function: submitAndAwait],
        statusChange: [Function: statusChange],
      },
      cache: ResourceCache {
        ttl: 20000,
        set: [Function: set],
        unset: [Function: unset],
        getActiveData: [Function: getActiveData],
        isCached: [Function: isCached],
        clear: [Function: clear],
      },
      options: {
        timeout: undefined,
        resourceCacheTTL: undefined,
        fetch: undefined,
        retryOptions: undefined,
      },
      getChain: [Function: getChain],
      getNode: [Function: getNode],
      getGasConfig: [Function: getGasConfig],
      connect: [Function: connect],
      fetchChainAndNodeInfo: [Function: fetchChainAndNodeInfo],
      createOperations: [Function: createOperations],
      getVersion: [Function: getVersion],
      getBlockNumber: [Function: getBlockNumber],
      fetchNode: [Function: fetchNode],
      fetchChain: [Function: fetchChain],
      getChainId: [Function: getChainId],
      getBaseAssetId: [Function: getBaseAssetId],
      validateTransaction: [Function: validateTransaction],
      sendTransaction: [Function: sendTransaction],
      dryRun: [Function: dryRun],
      estimatePredicates: [Function: estimatePredicates],
      estimateTxDependencies: [Function: estimateTxDependencies],
      estimateMultipleTxDependencies: [Function: estimateMultipleTxDependencies],
      dryRunMultipleTransactions: [Function: dryRunMultipleTransactions],
      estimateTxGasAndFee: [Function: estimateTxGasAndFee],
      simulate: [Function: simulate],
      getTransactionCost: [Function: getTransactionCost],
      getCoins: [Function: getCoins],
      getResourcesToSpend: [Function: getResourcesToSpend],
      getBlock: [Function: getBlock],
      getBlocks: [Function: getBlocks],
      getBlockWithTransactions: [Function: getBlockWithTransactions],
      getTransaction: [Function: getTransaction],
      getTransactions: [Function: getTransactions],
      getContract: [Function: getContract],
      getContractBalance: [Function: getContractBalance],
      getBalance: [Function: getBalance],
      getBalances: [Function: getBalances],
      getMessages: [Function: getMessages],
      getMessageProof: [Function: getMessageProof],
      getLatestGasPrice: [Function: getLatestGasPrice],
      estimateGasPrice: [Function: estimateGasPrice],
      getMessageStatus: [Function: getMessageStatus],
      produceBlocks: [Function: produceBlocks],
      getTransactionResponse: [Function: getTransactionResponse],
      getMessageByNonce: [Function: getMessageByNonce],
      getRelayedTransactionStatus: [Function: getRelayedTransactionStatus],
      validatePaginationArgs: [Function: validatePaginationArgs],
      extractDryRunError: [Function: extractDryRunError],
    },
    functions: {
      main: [Function: main],
    },
    setConfigurableConstants: [Function: setConfigurableConstants],
  },
  transactionResult: {
    id: "0xba0876fe2944129ee4f1e9838aaf3f6feb6bd2b0ecae2c9a0cf1231cb48fd9e3",
    tip: <BN: 0x0>,
    fee: <BN: 0x0>,
    gasUsed: <BN: 0x1059>,
    operations: [
      {
        name: "Transfer asset",
        from: {
          type: 1,
          address: "0x6b63804cfbf9856e68e5b6e7aef238dc8311ec55bec04df774003a2c96e0418e",
        },
        to: {
          type: 1,
          address: "0xcdd3f03f4b5c117291e0a2fed092e27654d69003b00eafb27d3f29b1b132717b",
        },
        assetsSent: [
          {
            assetId: "0xf8f8b6283d7fa5b672b530cbb84fcccb4ff8dc40f8176ef4544ddb1f1952ad07",
            amount: <BN: 0xa>,
          }
        ],
      }
    ],
    type: "Script",
    blockId: "0x3674a254208c59ee5994e8c49735bb9e18521cfbe2f00a7cfa36337c72e8f2a5",
    time: "4611686020152345294",
    status: "success",
    receipts: [
      {
        type: 2,
        id: "0x0000000000000000000000000000000000000000000000000000000000000000",
        ptr: <BN: 0x3fffbd0>,
        len: <BN: 0x20>,
        digest: "0xa8bd8d4ff78d436da37d114a4501069f9ee09191855fd893a94140cf29309316",
        pc: <BN: 0x2b54>,
        is: <BN: 0x2880>,
        data: "0x07ba6dd0e7a540d05a98f179aa4e90bc5b3bcdd8441080fd037d369c3740f942",
      },
      {
        type: 9,
        result: <BN: 0x0>,
        gasUsed: <BN: 0x1059>,
      }
    ],
    mintedAssets: [],
    burnedAssets: [],
    isTypeMint: false,
    isTypeCreate: false,
    isTypeScript: true,
    isTypeUpgrade: false,
    isTypeUpload: false,
    isTypeBlob: false,
    isStatusFailure: false,
    isStatusSuccess: true,
    isStatusPending: false,
    date: 2024-08-29T18:49:13.000Z,
    transaction: {
      type: 0,
      scriptGasLimit: <BN: 0x186a0>,
      policyTypes: 8,
      inputs: [
        {
          type: 0,
          txID: "0x0928995ed5db8864d653616eff625740bdc5e5147b32f7db0292bea05bbea460",
          outputIndex: 0,
          owner: "0x6b63804cfbf9856e68e5b6e7aef238dc8311ec55bec04df774003a2c96e0418e",
          amount: <BN: 0xfffffffffffffd8>,
          assetId: "0xf8f8b6283d7fa5b672b530cbb84fcccb4ff8dc40f8176ef4544ddb1f1952ad07",
          txPointer: {
            blockHeight: 0,
            txIndex: 0,
          },
          witnessIndex: 1,
          predicateGasUsed: <BN: 0x0>,
          predicateLength: <BN: 0x0>,
          predicateDataLength: <BN: 0x0>,
          predicate: "0x",
          predicateData: "0x",
        }
      ],
      outputs: [
        {
          type: 2,
          to: "0x6b63804cfbf9856e68e5b6e7aef238dc8311ec55bec04df774003a2c96e0418e",
          amount: <BN: 0xfffffffffffffce>,
          assetId: "0xf8f8b6283d7fa5b672b530cbb84fcccb4ff8dc40f8176ef4544ddb1f1952ad07",
        },
        {
          type: 0,
          to: "0xcdd3f03f4b5c117291e0a2fed092e27654d69003b00eafb27d3f29b1b132717b",
          amount: <BN: 0xa>,
          assetId: "0xf8f8b6283d7fa5b672b530cbb84fcccb4ff8dc40f8176ef4544ddb1f1952ad07",
        }
      ],
      policies: [
        {
          data: <BN: 0x1>,
          type: 8,
        }
      ],
      witnesses: [
        {
          data: "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
          dataLength: 64,
        }, {
          data: "0x4e4366436496ff7d45d309ad5170bb864d640aae358982f6cc235db4e55b7a03e48c3e4c2fe784a830cd19bfcf8ff98a520ffd82387e6dc54d4b1c48b2b95d70",
          dataLength: 64,
        }
      ],
      inputsCount: 1,
      outputsCount: 2,
      witnessesCount: 2,
      scriptLength: <BN: 0x1108>,
      scriptDataLength: <BN: 0x20>,
      receiptsRoot: "0xb44db91b6986487a924cb5e2e049369715a1e0510dcc5adad283d52da75c5594",
      script: "",
      scriptData: "0x0000000000000001000000000000000000000000000000010000000000000000",
    },
    logs: [],
  },
  transactionResponse: TransactionResponse {
    id: "0xba0876fe2944129ee4f1e9838aaf3f6feb6bd2b0ecae2c9a0cf1231cb48fd9e3",
    provider: _Provider {
      url: "http://127.0.0.1:4000/v1/graphql",
      operations: {
        getVersion: [Function: getVersion],
        getNodeInfo: [Function: getNodeInfo],
        getChain: [Function: getChain],
        getTransaction: [Function: getTransaction],
        getTransactionWithReceipts: [Function: getTransactionWithReceipts],
        getTransactions: [Function: getTransactions],
        getTransactionsByOwner: [Function: getTransactionsByOwner],
        estimatePredicates: [Function: estimatePredicates],
        getBlock: [Function: getBlock],
        getBlockWithTransactions: [Function: getBlockWithTransactions],
        getBlocks: [Function: getBlocks],
        getCoin: [Function: getCoin],
        getCoins: [Function: getCoins],
        getCoinsToSpend: [Function: getCoinsToSpend],
        getContract: [Function: getContract],
        getContractBalance: [Function: getContractBalance],
        getBalance: [Function: getBalance],
        getLatestGasPrice: [Function: getLatestGasPrice],
        estimateGasPrice: [Function: estimateGasPrice],
        getBalances: [Function: getBalances],
        getMessages: [Function: getMessages],
        getMessageProof: [Function: getMessageProof],
        getMessageStatus: [Function: getMessageStatus],
        getRelayedTransactionStatus: [Function: getRelayedTransactionStatus],
        dryRun: [Function: dryRun],
        submit: [Function: submit],
        produceBlocks: [Function: produceBlocks],
        getMessageByNonce: [Function: getMessageByNonce],
        submitAndAwait: [Function: submitAndAwait],
        statusChange: [Function: statusChange],
      },
      cache: ResourceCache {
        ttl: 20000,
        set: [Function: set],
        unset: [Function: unset],
        getActiveData: [Function: getActiveData],
        isCached: [Function: isCached],
        clear: [Function: clear],
      },
      options: {
        timeout: undefined,
        resourceCacheTTL: undefined,
        fetch: undefined,
        retryOptions: undefined,
      },
      getChain: [Function: getChain],
      getNode: [Function: getNode],
      getGasConfig: [Function: getGasConfig],
      connect: [Function: connect],
      fetchChainAndNodeInfo: [Function: fetchChainAndNodeInfo],
      createOperations: [Function: createOperations],
      getVersion: [Function: getVersion],
      getBlockNumber: [Function: getBlockNumber],
      fetchNode: [Function: fetchNode],
      fetchChain: [Function: fetchChain],
      getChainId: [Function: getChainId],
      getBaseAssetId: [Function: getBaseAssetId],
      validateTransaction: [Function: validateTransaction],
      sendTransaction: [Function: sendTransaction],
      dryRun: [Function: dryRun],
      estimatePredicates: [Function: estimatePredicates],
      estimateTxDependencies: [Function: estimateTxDependencies],
      estimateMultipleTxDependencies: [Function: estimateMultipleTxDependencies],
      dryRunMultipleTransactions: [Function: dryRunMultipleTransactions],
      estimateTxGasAndFee: [Function: estimateTxGasAndFee],
      simulate: [Function: simulate],
      getTransactionCost: [Function: getTransactionCost],
      getCoins: [Function: getCoins],
      getResourcesToSpend: [Function: getResourcesToSpend],
      getBlock: [Function: getBlock],
      getBlocks: [Function: getBlocks],
      getBlockWithTransactions: [Function: getBlockWithTransactions],
      getTransaction: [Function: getTransaction],
      getTransactions: [Function: getTransactions],
      getContract: [Function: getContract],
      getContractBalance: [Function: getContractBalance],
      getBalance: [Function: getBalance],
      getBalances: [Function: getBalances],
      getMessages: [Function: getMessages],
      getMessageProof: [Function: getMessageProof],
      getLatestGasPrice: [Function: getLatestGasPrice],
      estimateGasPrice: [Function: estimateGasPrice],
      getMessageStatus: [Function: getMessageStatus],
      produceBlocks: [Function: produceBlocks],
      getTransactionResponse: [Function: getTransactionResponse],
      getMessageByNonce: [Function: getMessageByNonce],
      getRelayedTransactionStatus: [Function: getRelayedTransactionStatus],
      validatePaginationArgs: [Function: validatePaginationArgs],
      extractDryRunError: [Function: extractDryRunError],
    },
    gasUsed: <BN: 0x0>,
    gqlTransaction: undefined,
    request: ScriptTransactionRequest {
      tip: undefined,
      maturity: undefined,
      maxFee: <BN: 0x1>,
      witnessLimit: undefined,
      inputs: [
        {
          id: "0x0928995ed5db8864d653616eff625740bdc5e5147b32f7db0292bea05bbea4600000",
          type: 0,
          owner: "0x6b63804cfbf9856e68e5b6e7aef238dc8311ec55bec04df774003a2c96e0418e",
          amount: <BN: 0xfffffffffffffd8>,
          assetId: "0xf8f8b6283d7fa5b672b530cbb84fcccb4ff8dc40f8176ef4544ddb1f1952ad07",
          txPointer: "0x00000000000000000000000000000000",
          witnessIndex: 1,
          predicate: undefined,
          predicateData: undefined,
        }
      ],
      outputs: [
        {
          type: 2,
          to: "0x6b63804cfbf9856e68e5b6e7aef238dc8311ec55bec04df774003a2c96e0418e",
          assetId: "0xf8f8b6283d7fa5b672b530cbb84fcccb4ff8dc40f8176ef4544ddb1f1952ad07",
        },
        {
          type: 0,
          to: "0xcdd3f03f4b5c117291e0a2fed092e27654d69003b00eafb27d3f29b1b132717b",
          amount: 10,
          assetId: "0xf8f8b6283d7fa5b672b530cbb84fcccb4ff8dc40f8176ef4544ddb1f1952ad07",
        }
      ],
      witnesses: [
        Uint8Array(64) [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
        "0x4e4366436496ff7d45d309ad5170bb864d640aae358982f6cc235db4e55b7a03e48c3e4c2fe784a830cd19bfcf8ff98a520ffd82387e6dc54d4b1c48b2b95d70"
      ],
      type: 0,
      gasLimit: <BN: 0x186a0>,
      script: Uint8Array(4360) [ 26, 240, 48, 0, 116, 0, 0, 2, 0, 0, 0, 0, 0, 0, 16, 216, 93, 255, 192, 1, 16, 255, 255, 0, 26, 236, 80, 0, 145, 0, 3, 208, 80, 83, 178, 88, 97, 64, 0, 10, 95, 237, 0, 117, 97, 64, 0, 4, 95, 237, 0, 106, 80, 67, 179, 168, 80, 71, 176, 224, 114, 72, 0, 8, 40, 69, 4, 128, 80, 75, 178, 152, 114, 64, 0, 8, 40, 73, 20, 0, 80, 67, 179, 136, 114, 68, 0, 8, 40, 65, 36, 64, 80, 67, 179, 136, 80, 71, 178, 8, 26, 233, 0, 0, 26, 229, 16, 0, 32, 248, 51, 0, 88, 251, 224, 2, 80, 251, 224, 4, 116, 0, 0, 151, 26, 71, 208, 0, 114, 72, 0, 24, 40, 237, 20, 128, 80, 71, 178, 32, 26, 233, 0, 0, 26, 229, 16, 0, 32, 248, 51, 0, 88, 251, 224, 2, 80, 251, 224, 4, 116, 0, 0, 141, 26, 67, 208, 0, 80, 71, 176, 24, 114, 72, 0, 24, 40, 69, 4, 128, 80, 67, 176, 232, 114, 72, 0, 24, 40, 67, 180, 128, 80, 73, 0, 24, 114, 76, 0, 24, 40, 73, 20, 192, 80, 71, 178, 160, 114, 72, 0, 48, 40, 69, 4, 128, 80, 67, 178, 208, 114, 72, 0, 48, 40, 65, 20, 128, 80, 71, 179, 88, 114, 72, 0, 48, 40, 69, 4, 128, 80, 67, 179, 88, 80, 71, 179, 88, 80, 69, 16, 24, 80, 75, 178, 104, 114, 76, 0, 24, 40, 73, 4, 192, 80, 67, 178, 128, 114, 76, 0, 24, 40, 65, 20, 192, 80, 71, 178, 56, 26, 233, 32, 0, 26, 229, 0, 0, 26, 225, 16, 0, 32, 248, 51, 0, 88, 251, 224, 2, 80, 251, 224, 4, 116, 0, 1, 12, 26, 67, 208, 0, 80, 71, 176, 48, 114, 72, 0, 32, 40, 69, 4, 128, 80, 67, 179, 176, 114, 72, 0, 32, 40, 65, 20, 128, 80, 67, 179, 176, 80, 71, 176, 128, 114, 72, 0, 32, 40, 69, 4, 128, 114, 64, 4, 0, 38, 64, 0, 0, 26, 64, 112, 0, 80, 75, 177, 48, 95, 237, 0, 38, 114, 64, 4, 0, 95, 237, 0, 39, 95, 236, 0, 40, 80, 67, 176, 80, 114, 76, 0, 24, 40, 65, 36, 192, 80, 75, 177, 96, 114, 76, 0, 24, 40, 73, 4, 192, 80, 67, 179, 0, 114, 76, 0, 24, 40, 65, 36, 192, 80, 75, 177, 216, 114, 76, 0, 24, 40, 73, 4, 192, 80, 67, 176, 104, 114, 76, 0, 24, 40, 65, 36, 192, 80, 75, 177, 24, 114, 76, 0, 24, 40, 73, 4, 192, 93, 87, 176, 35, 93, 79, 176, 36, 93, 67, 176, 37, 114, 72, 0, 32, 16, 73, 4, 128, 21, 73, 36, 192, 118, 72, 0, 1, 116, 0, 0, 5, 114, 72, 0, 2, 27, 77, 52, 128, 38, 76, 0, 0, 40, 29, 84, 0, 26, 84, 112, 0, 80, 75, 177, 120, 114, ... 3847 more ],
      scriptData: Uint8Array(32) [ 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 ],
      abis: {
        main: {
          programType: "script",
          specVersion: "1",
          encodingVersion: "1",
          concreteTypes: [
            {
              type: "b256",
              concreteTypeId: "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b",
            },
            {
              type: "struct std::vec::Vec<u64>",
              concreteTypeId: "d5bfe1d4e1ace20166c9b50cadd47e862020561bde24f5189cfc2723f5ed76f4",
              metadataTypeId: 3,
              typeArguments: [ "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
              ],
            }, {
              type: "u64",
              concreteTypeId: "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
            }
          ],
          metadataTypes: [
            {
              type: "generic T",
              metadataTypeId: 0,
            }, {
              type: "raw untyped ptr",
              metadataTypeId: 1,
            }, {
              type: "struct std::vec::RawVec",
              metadataTypeId: 2,
              components: [
                {
                  name: "ptr",
                  typeId: 1,
                }, {
                  name: "cap",
                  typeId: "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
                }
              ],
              typeParameters: [ 0 ],
            }, {
              type: "struct std::vec::Vec",
              metadataTypeId: 3,
              components: [
                {
                  name: "buf",
                  typeId: 2,
                  typeArguments: [
                    [Object ...]
                  ],
                }, {
                  name: "len",
                  typeId: "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
                }
              ],
              typeParameters: [ 0 ],
            }
          ],
          functions: [
            {
              inputs: [
                {
                  name: "input_tx_idxs",
                  concreteTypeId: "d5bfe1d4e1ace20166c9b50cadd47e862020561bde24f5189cfc2723f5ed76f4",
                },
                {
                  name: "output_tx_idxs",
                  concreteTypeId: "d5bfe1d4e1ace20166c9b50cadd47e862020561bde24f5189cfc2723f5ed76f4",
                }
              ],
              name: "main",
              output: "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b",
              attributes: [
                {
                  name: "doc-comment",
                  arguments: [ " extract inputs, and outputs" ],
                }, {
                  name: "doc-comment",
                  arguments: [ " extract the script bytecode hash" ],
                }, {
                  name: "doc-comment",
                  arguments: [ " calculate the tranasaction hash based on that" ],
                },
                {
                  name: "doc-comment",
                  arguments: [ "" ],
                }, {
                  name: "doc-comment",
                  arguments: [ " V0, user can only sign over a single input and single output { only of type coin }"
                  ],
                }, {
                  name: "doc-comment",
                  arguments: [ " txn_hash = sha_256([[input_tx_id_bytes], [hash_of_serialized_output_type_coin]], [script_bytecodehash_bytes])"
                  ],
                }
              ],
            }
          ],
          loggedTypes: [],
          messagesTypes: [],
          configurables: [],
        },
        otherContractsAbis: {},
      },
      toTransaction: [Function: toTransaction],
      getContractInputs: [Function: getContractInputs],
      getContractOutputs: [Function: getContractOutputs],
      getVariableOutputs: [Function: getVariableOutputs],
      setScript: [Function: setScript],
      addVariableOutputs: [Function: addVariableOutputs],
      calculateMaxGas: [Function: calculateMaxGas],
      addContractInputAndOutput: [Function: addContractInputAndOutput],
      getTransactionId: [Function: getTransactionId],
      setData: [Function: setData],
      metadataGas: [Function: metadataGas],
      getBaseTransaction: [Function: getBaseTransaction],
      toTransactionBytes: [Function: toTransactionBytes],
      pushInput: [Function: pushInput],
      pushOutput: [Function: pushOutput],
      addWitness: [Function: addWitness],
      addEmptyWitness: [Function: addEmptyWitness],
      updateWitnessByOwner: [Function: updateWitnessByOwner],
      updateWitness: [Function: updateWitness],
      addAccountWitnesses: [Function: addAccountWitnesses],
      getCoinInputs: [Function: getCoinInputs],
      getCoinOutputs: [Function: getCoinOutputs],
      getChangeOutputs: [Function: getChangeOutputs],
      getCoinInputWitnessIndexByOwner: [Function: getCoinInputWitnessIndexByOwner],
      addCoinInput: [Function: addCoinInput],
      addMessageInput: [Function: addMessageInput],
      addResource: [Function: addResource],
      addResources: [Function: addResources],
      addCoinOutput: [Function: addCoinOutput],
      addCoinOutputs: [Function: addCoinOutputs],
      addChangeOutput: [Function: addChangeOutput],
      byteSize: [Function: byteSize],
      calculateMinGas: [Function: calculateMinGas],
      fundWithFakeUtxos: [Function: fundWithFakeUtxos],
      getCoinOutputsQuantities: [Function: getCoinOutputsQuantities],
      toJSON: [Function: toJSON],
      removeWitness: [Function: removeWitness],
      adjustWitnessIndexes: [Function: adjustWitnessIndexes],
      updatePredicateGasUsed: [Function: updatePredicateGasUsed],
      byteLength: [Function: byteLength],
    },
    status: {
      type: "SuccessStatus",
      block: {
        id: "0x3674a254208c59ee5994e8c49735bb9e18521cfbe2f00a7cfa36337c72e8f2a5",
      },
      time: "4611686020152345294",
      programState: {
        returnType: "RETURN_DATA",
        data: "0xa8bd8d4ff78d436da37d114a4501069f9ee09191855fd893a94140cf29309316",
      },
      receipts: [
        {
          id: null,
          pc: "11092",
          is: "10368",
          to: null,
          toAddress: null,
          amount: null,
          assetId: null,
          gas: null,
          param1: null,
          param2: null,
          val: null,
          ptr: "67107792",
          digest: "0xa8bd8d4ff78d436da37d114a4501069f9ee09191855fd893a94140cf29309316",
          reason: null,
          ra: null,
          rb: null,
          rc: null,
          rd: null,
          len: "32",
          receiptType: "RETURN_DATA",
          result: null,
          gasUsed: null,
          data: "0x07ba6dd0e7a540d05a98f179aa4e90bc5b3bcdd8441080fd037d369c3740f942",
          sender: null,
          recipient: null,
          nonce: null,
          contractId: null,
          subId: null,
        }, {
          id: null,
          pc: null,
          is: null,
          to: null,
          toAddress: null,
          amount: null,
          assetId: null,
          gas: null,
          param1: null,
          param2: null,
          val: null,
          ptr: null,
          digest: null,
          reason: null,
          ra: null,
          rb: null,
          rc: null,
          rd: null,
          len: null,
          receiptType: "SCRIPT_RESULT",
          result: "0",
          gasUsed: "4185",
          data: null,
          sender: null,
          recipient: null,
          nonce: null,
          contractId: null,
          subId: null,
        }
      ],
      totalGas: "348637",
      totalFee: "0",
      transaction: {
        receiptsRoot: "0xb44db91b6986487a924cb5e2e049369715a1e0510dcc5adad283d52da75c5594",
        inputs: [
          {
            type: "InputCoin",
            txPointer: "000000000000",
          }
        ],
        outputs: [
          {
            type: "ChangeOutput",
            to: "0x6b63804cfbf9856e68e5b6e7aef238dc8311ec55bec04df774003a2c96e0418e",
            amount: "1152921504606846926",
            assetId: "0xf8f8b6283d7fa5b672b530cbb84fcccb4ff8dc40f8176ef4544ddb1f1952ad07",
          },
          {
            type: "CoinOutput",
            to: "0xcdd3f03f4b5c117291e0a2fed092e27654d69003b00eafb27d3f29b1b132717b",
            amount: "10",
            assetId: "0xf8f8b6283d7fa5b672b530cbb84fcccb4ff8dc40f8176ef4544ddb1f1952ad07",
          }
        ],
      },
    },
    abis: {
      main: {
        programType: "script",
        specVersion: "1",
        encodingVersion: "1",
        concreteTypes: [
          {
            type: "b256",
            concreteTypeId: "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b",
          },
          {
            type: "struct std::vec::Vec<u64>",
            concreteTypeId: "d5bfe1d4e1ace20166c9b50cadd47e862020561bde24f5189cfc2723f5ed76f4",
            metadataTypeId: 3,
            typeArguments: [ "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
            ],
          }, {
            type: "u64",
            concreteTypeId: "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
          }
        ],
        metadataTypes: [
          {
            type: "generic T",
            metadataTypeId: 0,
          }, {
            type: "raw untyped ptr",
            metadataTypeId: 1,
          }, {
            type: "struct std::vec::RawVec",
            metadataTypeId: 2,
            components: [
              {
                name: "ptr",
                typeId: 1,
              }, {
                name: "cap",
                typeId: "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
              }
            ],
            typeParameters: [ 0 ],
          }, {
            type: "struct std::vec::Vec",
            metadataTypeId: 3,
            components: [
              {
                name: "buf",
                typeId: 2,
                typeArguments: [
                  [Object ...]
                ],
              }, {
                name: "len",
                typeId: "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0",
              }
            ],
            typeParameters: [ 0 ],
          }
        ],
        functions: [
          {
            inputs: [
              {
                name: "input_tx_idxs",
                concreteTypeId: "d5bfe1d4e1ace20166c9b50cadd47e862020561bde24f5189cfc2723f5ed76f4",
              },
              {
                name: "output_tx_idxs",
                concreteTypeId: "d5bfe1d4e1ace20166c9b50cadd47e862020561bde24f5189cfc2723f5ed76f4",
              }
            ],
            name: "main",
            output: "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b",
            attributes: [
              {
                name: "doc-comment",
                arguments: [ " extract inputs, and outputs" ],
              }, {
                name: "doc-comment",
                arguments: [ " extract the script bytecode hash" ],
              }, {
                name: "doc-comment",
                arguments: [ " calculate the tranasaction hash based on that" ],
              },
              {
                name: "doc-comment",
                arguments: [ "" ],
              }, {
                name: "doc-comment",
                arguments: [ " V0, user can only sign over a single input and single output { only of type coin }"
                ],
              }, {
                name: "doc-comment",
                arguments: [ " txn_hash = sha_256([[input_tx_id_bytes], [hash_of_serialized_output_type_coin]], [script_bytecodehash_bytes])"
                ],
              }
            ],
          }
        ],
        loggedTypes: [],
        messagesTypes: [],
        configurables: [],
      },
      otherContractsAbis: {},
    },
    applyMalleableSubscriptionFields: [Function: applyMalleableSubscriptionFields],
    getTransaction: [Function: getTransaction],
    getReceipts: [Function: getReceipts],
    fetch: [Function: fetch],
    decodeTransaction: [Function: decodeTransaction],
    getTransactionSummary: [Function: getTransactionSummary],
    waitForStatusChange: [Function: waitForStatusChange],
    assembleResult: [Function: assembleResult],
    waitForResult: [Function: waitForResult],
    wait: [Function: wait],
    unsetResourceCache: [Function: unsetResourceCache],
  },
  transactionId: "0xba0876fe2944129ee4f1e9838aaf3f6feb6bd2b0ecae2c9a0cf1231cb48fd9e3",
  logs: [],
  gasUsed: <BN: 0x1059>,
}

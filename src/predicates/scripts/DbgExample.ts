/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.94.2
  Forc version: 0.63.1
  Fuel-Core version: 0.34.0
*/

import {
  Account,
  BigNumberish,
  BN,
  decompressBytecode,
  Script,
} from 'fuels';

import type { Enum, Vec } from "./common";

export type TxOutputInput = Enum<{ OutputCoin: OutputCoinInput }>;
export type TxOutputOutput = Enum<{ OutputCoin: OutputCoinOutput }>;

export type AddressInput = { bits: string };
export type AddressOutput = AddressInput;
export type AssetIdInput = { bits: string };
export type AssetIdOutput = AssetIdInput;
export type OutputCoinInput = { to: AddressInput, amount: BigNumberish, asset_id: AssetIdInput };
export type OutputCoinOutput = { to: AddressOutput, amount: BN, asset_id: AssetIdOutput };

export type DbgExampleInputs = [tx_outputs: Vec<TxOutputInput>];
export type DbgExampleOutput = boolean;

export type DbgExampleConfigurables = Partial<{
  PUBLIC_KEY: string;
}>;

const abi = {
  "programType": "script",
  "specVersion": "1",
  "encodingVersion": "1",
  "concreteTypes": [
    {
      "type": "bool",
      "concreteTypeId": "b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903"
    },
    {
      "type": "enum TxOutput",
      "concreteTypeId": "af34e1a28aeada2641e09fe17c04cf603395e41324ed732fded5bcb116df6a77",
      "metadataTypeId": 2
    },
    {
      "type": "struct std::b512::B512",
      "concreteTypeId": "745e252e80bec590efc3999ae943f07ccea4d5b45b00bb6575499b64abdd3322",
      "metadataTypeId": 8
    },
    {
      "type": "struct std::vec::Vec<enum TxOutput>",
      "concreteTypeId": "97ff3cc17f62db65f7192a97e4b66c12a128d3e87622971a0c5867781dd581d3",
      "metadataTypeId": 10,
      "typeArguments": [
        "af34e1a28aeada2641e09fe17c04cf603395e41324ed732fded5bcb116df6a77"
      ]
    },
    {
      "type": "u64",
      "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
    }
  ],
  "metadataTypes": [
    {
      "type": "[_; 2]",
      "metadataTypeId": 0,
      "components": [
        {
          "name": "__array_element",
          "typeId": 1
        }
      ]
    },
    {
      "type": "b256",
      "metadataTypeId": 1
    },
    {
      "type": "enum TxOutput",
      "metadataTypeId": 2,
      "components": [
        {
          "name": "OutputCoin",
          "typeId": 5
        }
      ]
    },
    {
      "type": "generic T",
      "metadataTypeId": 3
    },
    {
      "type": "raw untyped ptr",
      "metadataTypeId": 4
    },
    {
      "type": "struct OutputCoin",
      "metadataTypeId": 5,
      "components": [
        {
          "name": "to",
          "typeId": 6
        },
        {
          "name": "amount",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "asset_id",
          "typeId": 7
        }
      ]
    },
    {
      "type": "struct std::address::Address",
      "metadataTypeId": 6,
      "components": [
        {
          "name": "bits",
          "typeId": 1
        }
      ]
    },
    {
      "type": "struct std::asset_id::AssetId",
      "metadataTypeId": 7,
      "components": [
        {
          "name": "bits",
          "typeId": 1
        }
      ]
    },
    {
      "type": "struct std::b512::B512",
      "metadataTypeId": 8,
      "components": [
        {
          "name": "bits",
          "typeId": 0
        }
      ]
    },
    {
      "type": "struct std::vec::RawVec",
      "metadataTypeId": 9,
      "components": [
        {
          "name": "ptr",
          "typeId": 4
        },
        {
          "name": "cap",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ],
      "typeParameters": [
        3
      ]
    },
    {
      "type": "struct std::vec::Vec",
      "metadataTypeId": 10,
      "components": [
        {
          "name": "buf",
          "typeId": 9,
          "typeArguments": [
            {
              "name": "",
              "typeId": 3
            }
          ]
        },
        {
          "name": "len",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ],
      "typeParameters": [
        3
      ]
    }
  ],
  "functions": [
    {
      "inputs": [
        {
          "name": "tx_outputs",
          "concreteTypeId": "97ff3cc17f62db65f7192a97e4b66c12a128d3e87622971a0c5867781dd581d3"
        }
      ],
      "name": "main",
      "output": "b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903",
      "attributes": [
        {
          "name": "doc-comment",
          "arguments": [
            " extract inputs, and outputs"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " extract the script bytecode hash"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " calculate the tranasaction hash based on that"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " V0, user can only sign over a single input and single output { only of type coin }"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " txn_hash = sha_256([[input_tx_id_bytes], [hash_of_serialized_output_type_coin]], [script_bytecodehash_bytes])"
          ]
        }
      ]
    }
  ],
  "loggedTypes": [
    {
      "logId": "1515152261580153489",
      "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
    }
  ],
  "messagesTypes": [],
  "configurables": [
    {
      "name": "PUBLIC_KEY",
      "concreteTypeId": "745e252e80bec590efc3999ae943f07ccea4d5b45b00bb6575499b64abdd3322",
      "offset": 7144
    }
  ]
};

const bytecode = decompressBytecode('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');

export class DbgExample extends Script<DbgExampleInputs, DbgExampleOutput> {

  static readonly abi = abi;
  static readonly bytecode = bytecode;

  constructor(wallet: Account) {
    super(bytecode, abi, wallet);
  }
}

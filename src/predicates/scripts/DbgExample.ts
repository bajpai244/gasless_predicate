/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.94.2
  Forc version: 0.63.1
  Fuel-Core version: 0.34.0
*/

import {
  Account,
  BigNumberish,
  BN,
  decompressBytecode,
  Script,
} from 'fuels';

import type { Enum, Vec } from "./common";

export type TxInputInput = Enum<{ InputCoin: InputCoinInput }>;
export type TxInputOutput = Enum<{ InputCoin: InputCoinOutput }>;
export type TxOutputInput = Enum<{ OutputCoin: OutputCoinInput }>;
export type TxOutputOutput = Enum<{ OutputCoin: OutputCoinOutput }>;

export type AddressInput = { bits: string };
export type AddressOutput = AddressInput;
export type AssetIdInput = { bits: string };
export type AssetIdOutput = AssetIdInput;
export type InputCoinInput = { tx_id: string, output_index: BigNumberish };
export type InputCoinOutput = { tx_id: string, output_index: number };
export type OutputCoinInput = { to: AddressInput, amount: BigNumberish, asset_id: AssetIdInput };
export type OutputCoinOutput = { to: AddressOutput, amount: BN, asset_id: AssetIdOutput };

export type DbgExampleInputs = [tx_inputs: Vec<TxInputInput>, tx_outputs: Vec<TxOutputInput>, signature: string];
export type DbgExampleOutput = boolean;

export type DbgExampleConfigurables = Partial<{
  PUBLIC_KEY: string;
}>;

const abi = {
  "programType": "script",
  "specVersion": "1",
  "encodingVersion": "1",
  "concreteTypes": [
    {
      "type": "bool",
      "concreteTypeId": "b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903"
    },
    {
      "type": "enum TxInput",
      "concreteTypeId": "67c80f7883622d4f66c11d53e2f037ede5841cd030f0ca3d1dc936d0128507cb",
      "metadataTypeId": 2
    },
    {
      "type": "enum TxOutput",
      "concreteTypeId": "af34e1a28aeada2641e09fe17c04cf603395e41324ed732fded5bcb116df6a77",
      "metadataTypeId": 3
    },
    {
      "type": "struct std::b512::B512",
      "concreteTypeId": "745e252e80bec590efc3999ae943f07ccea4d5b45b00bb6575499b64abdd3322",
      "metadataTypeId": 10
    },
    {
      "type": "struct std::vec::Vec<enum TxInput>",
      "concreteTypeId": "bc7c44c1611de3647c8fb6195acf2d5dd763d20f10a96cbd4a3d7b394d094cd4",
      "metadataTypeId": 12,
      "typeArguments": [
        "67c80f7883622d4f66c11d53e2f037ede5841cd030f0ca3d1dc936d0128507cb"
      ]
    },
    {
      "type": "struct std::vec::Vec<enum TxOutput>",
      "concreteTypeId": "97ff3cc17f62db65f7192a97e4b66c12a128d3e87622971a0c5867781dd581d3",
      "metadataTypeId": 12,
      "typeArguments": [
        "af34e1a28aeada2641e09fe17c04cf603395e41324ed732fded5bcb116df6a77"
      ]
    }
  ],
  "metadataTypes": [
    {
      "type": "[_; 2]",
      "metadataTypeId": 0,
      "components": [
        {
          "name": "__array_element",
          "typeId": 1
        }
      ]
    },
    {
      "type": "b256",
      "metadataTypeId": 1
    },
    {
      "type": "enum TxInput",
      "metadataTypeId": 2,
      "components": [
        {
          "name": "InputCoin",
          "typeId": 6
        }
      ]
    },
    {
      "type": "enum TxOutput",
      "metadataTypeId": 3,
      "components": [
        {
          "name": "OutputCoin",
          "typeId": 7
        }
      ]
    },
    {
      "type": "generic T",
      "metadataTypeId": 4
    },
    {
      "type": "raw untyped ptr",
      "metadataTypeId": 5
    },
    {
      "type": "struct InputCoin",
      "metadataTypeId": 6,
      "components": [
        {
          "name": "tx_id",
          "typeId": 1
        },
        {
          "name": "output_index",
          "typeId": 13
        }
      ]
    },
    {
      "type": "struct OutputCoin",
      "metadataTypeId": 7,
      "components": [
        {
          "name": "to",
          "typeId": 8
        },
        {
          "name": "amount",
          "typeId": 14
        },
        {
          "name": "asset_id",
          "typeId": 9
        }
      ]
    },
    {
      "type": "struct std::address::Address",
      "metadataTypeId": 8,
      "components": [
        {
          "name": "bits",
          "typeId": 1
        }
      ]
    },
    {
      "type": "struct std::asset_id::AssetId",
      "metadataTypeId": 9,
      "components": [
        {
          "name": "bits",
          "typeId": 1
        }
      ]
    },
    {
      "type": "struct std::b512::B512",
      "metadataTypeId": 10,
      "components": [
        {
          "name": "bits",
          "typeId": 0
        }
      ]
    },
    {
      "type": "struct std::vec::RawVec",
      "metadataTypeId": 11,
      "components": [
        {
          "name": "ptr",
          "typeId": 5
        },
        {
          "name": "cap",
          "typeId": 14
        }
      ],
      "typeParameters": [
        4
      ]
    },
    {
      "type": "struct std::vec::Vec",
      "metadataTypeId": 12,
      "components": [
        {
          "name": "buf",
          "typeId": 11,
          "typeArguments": [
            {
              "name": "",
              "typeId": 4
            }
          ]
        },
        {
          "name": "len",
          "typeId": 14
        }
      ],
      "typeParameters": [
        4
      ]
    },
    {
      "type": "u16",
      "metadataTypeId": 13
    },
    {
      "type": "u64",
      "metadataTypeId": 14
    }
  ],
  "functions": [
    {
      "inputs": [
        {
          "name": "tx_inputs",
          "concreteTypeId": "bc7c44c1611de3647c8fb6195acf2d5dd763d20f10a96cbd4a3d7b394d094cd4"
        },
        {
          "name": "tx_outputs",
          "concreteTypeId": "97ff3cc17f62db65f7192a97e4b66c12a128d3e87622971a0c5867781dd581d3"
        },
        {
          "name": "signature",
          "concreteTypeId": "745e252e80bec590efc3999ae943f07ccea4d5b45b00bb6575499b64abdd3322"
        }
      ],
      "name": "main",
      "output": "b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903",
      "attributes": [
        {
          "name": "doc-comment",
          "arguments": [
            " extract inputs, and outputs"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " extract the script bytecode hash"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " calculate the tranasaction hash based on that"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " V0, user can only sign over a single input and single output { only of type coin }"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " txn_hash = sha_256([[input_tx_id_bytes], [hash_of_serialized_output_type_coin]], [script_bytecodehash_bytes])"
          ]
        }
      ]
    }
  ],
  "loggedTypes": [],
  "messagesTypes": [],
  "configurables": [
    {
      "name": "PUBLIC_KEY",
      "concreteTypeId": "745e252e80bec590efc3999ae943f07ccea4d5b45b00bb6575499b64abdd3322",
      "offset": 14064
    }
  ]
};

const bytecode = decompressBytecode('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');

export class DbgExample extends Script<DbgExampleInputs, DbgExampleOutput> {

  static readonly abi = abi;
  static readonly bytecode = bytecode;

  constructor(wallet: Account) {
    super(bytecode, abi, wallet);
  }
}

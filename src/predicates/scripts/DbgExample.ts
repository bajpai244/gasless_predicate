/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.94.2
  Forc version: 0.63.1
  Fuel-Core version: 0.34.0
*/

import {
  Account,
  BigNumberish,
  BN,
  decompressBytecode,
  Script,
} from 'fuels';

import type { Vec } from "./common";

export type DbgExampleInputs = [input_tx_idxs: Vec<BigNumberish>, output_tx_idxs: Vec<BigNumberish>];
export type DbgExampleOutput = string;

const abi = {
  "programType": "script",
  "specVersion": "1",
  "encodingVersion": "1",
  "concreteTypes": [
    {
      "type": "b256",
      "concreteTypeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
    },
    {
      "type": "struct std::vec::Vec<u64>",
      "concreteTypeId": "d5bfe1d4e1ace20166c9b50cadd47e862020561bde24f5189cfc2723f5ed76f4",
      "metadataTypeId": 3,
      "typeArguments": [
        "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
      ]
    },
    {
      "type": "u64",
      "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
    },
    {
      "type": "u8",
      "concreteTypeId": "c89951a24c6ca28c13fd1cfdc646b2b656d69e61a92b91023be7eb58eb914b6b"
    }
  ],
  "metadataTypes": [
    {
      "type": "generic T",
      "metadataTypeId": 0
    },
    {
      "type": "raw untyped ptr",
      "metadataTypeId": 1
    },
    {
      "type": "struct std::vec::RawVec",
      "metadataTypeId": 2,
      "components": [
        {
          "name": "ptr",
          "typeId": 1
        },
        {
          "name": "cap",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ],
      "typeParameters": [
        0
      ]
    },
    {
      "type": "struct std::vec::Vec",
      "metadataTypeId": 3,
      "components": [
        {
          "name": "buf",
          "typeId": 2,
          "typeArguments": [
            {
              "name": "",
              "typeId": 0
            }
          ]
        },
        {
          "name": "len",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ],
      "typeParameters": [
        0
      ]
    }
  ],
  "functions": [
    {
      "inputs": [
        {
          "name": "input_tx_idxs",
          "concreteTypeId": "d5bfe1d4e1ace20166c9b50cadd47e862020561bde24f5189cfc2723f5ed76f4"
        },
        {
          "name": "output_tx_idxs",
          "concreteTypeId": "d5bfe1d4e1ace20166c9b50cadd47e862020561bde24f5189cfc2723f5ed76f4"
        }
      ],
      "name": "main",
      "output": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b",
      "attributes": [
        {
          "name": "doc-comment",
          "arguments": [
            " extract inputs, and outputs"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " extract the script bytecode hash"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " calculate the tranasaction hash based on that"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " V0, user can only sign over a single input and single output { only of type coin }"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " txn_hash = sha_256([[input_tx_id_bytes], [hash_of_serialized_output_type_coin]], [script_bytecodehash_bytes])"
          ]
        }
      ]
    }
  ],
  "loggedTypes": [
    {
      "logId": "1515152261580153489",
      "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
    },
    {
      "logId": "14454674236531057292",
      "concreteTypeId": "c89951a24c6ca28c13fd1cfdc646b2b656d69e61a92b91023be7eb58eb914b6b"
    }
  ],
  "messagesTypes": [],
  "configurables": []
};

const bytecode = decompressBytecode('H4sIAAAAAAAAA5Vae2xb13k/JC8l2rGtq1fHXS8Rm8keiwYDhzqFgAHzZUiO4ihBV5HSqKhpSomdqFvRMkTkaV2xEUGwaEkLONnWucNaeMGwedjrSlZk+Rku7TajSFr1Cf9TQAGaVm7NVi2aVm5auL/vPHgPLy+VVIDAc8853znf+c73/o61nWJPMhZm/C+VKN2ph8w7d5h1y2HPs8isM7W8M2ezveUGexy/Bn6POZnzI07evV4dZbFkzqg5xRWnaqNdGGAYi1ezaKeHbWo7+eWadZMx6w2TJXbex2be2gw7b20a2HPJym8wrBFPNgZqmHemw7y/sDIbDPvF+VzaL+Nu8HZmteYUWLw6hnZhoO7kV2bQnxJzVpZ4O01rr2xp/Vv07eTMOPCOCVijjv4Eb6dpnWXXupkALsDndT8+IVPik8KaCbHmeZu3aS+0MVbzxpY36Fyta9wV52sUXcfbf3le7D9cR79oi36m+ksPu4nShPvuUsa9l9Y3C0ZtsDBcPzXKQqBTFH3hg+NHaofHGEvePc2s6Qr2WI5XZ4BLYbBm5qYZb+cO1XBHCTNtANflkXLD+Z1yI5XE3b4HtD3Lacvptux4NF9Z9/rPJ7z+8wnQc8T7Xt6ybpqcdq1n3vtTq4gzZ9x17G1y/siv0D2aBAf+MZOTA6yUtkOlSZsdmmTs71jozqdjuAPOi8y1PnSWWQ+fZtbUJrNuzvr55BNEU5yhB3sslvJuD+ERxHOgb7zcMCNOLkH3TzwMOrsjCi/+2zDs8i0WRv8ovonX6F7PqHNibD/uYT/t8y7Q8ZTNoph7hs99yLCtNx2SqwcD8HxQ4nnAedQ9gzUOYI3BUtEd6M8N1E5l+V0Ol3K1UH8OdBw1Gfoi9M3vtzBslxuJ3lKpxqgPcL2D48P2qTEO10t869uvSHQHTN9gAWsJXukCXB+d/WBuoA5amMDBTBaetEtlt688B77Ju0tOoSbow2XLTYq7ehry3EZXm+haKtTCfM3CEfDaQA3r7sO6+04x1k26or+QsLF/uJxjRJvQcfEbVnqklK6FzTSzy3MsTLTl7Qbbv8DYB1+g+79tszPgh78HX/zRDvEH69H4I2ZlwB/5TeDB8J+gM/M2x2lsoG5CVspp9GVcZr3JGNaMWbdNuSbrkWt2qzXVeoTfwfQwO2yj365wWA2uW8JF/HClNL5b50bE3KMaXw9CF2D+FPj6QzXw9yZof2G7ncZd9+n6sprtr5j5VdI78WQeejC/HguAGVL8rnQk4NY5HH3noGvyVzRZvlQJlt2u6Xadt3ZD6bxTBuepr1Ofk78E3Rmkx7seEmss0xpc5p3MBdLpkDnSmxdgK65uq7GAs/w3wUPOLom518xd5p4XMhZ+pJRZeQS0GQ2Yc1XQZnnH4/ELFaEPoGvz7g9I/iB73bJtow2+3DbeDz6Yy4YixMNzWRbtcN7HaX3ApOfSYbrTGeJ34D5zDHzRj3+c5T7tm3SIpb6hR8L9Qq90ga4u9M03neI1h+umgmFj77vQv1S+ZX7Fya+dI90Afv8G7KEns9p80GuW69jcMMncXsA6gP0iYCv4/VILHM1Vd1S8VuFwsO0C7iUT818EHH7ZK779Kt5+L5/V9oNuPI992Ed5f/P+r5CNFvefX98JpmP3W4JvVjx/I3OB7BJ8jIEaZPl7REsri7uyWcjKEi15+z1096B9qJo1Z6SscN6t2gObZmaVZInzr/p28pebc5zMeidZ+IDA53xMyU3VHmRyPW4fqzZkjL6z6Me+HfjjY9Brr4EuuAf2x9XR3rNmcZXbZe9+V7dB688pmZW0FnLsmw/ZhWzTeciuXkoG7xktSNybMo+zz+q449xOu78S/bGEIzuv7oB8KnUHv5T8DF59aR7n+U/wwmngk5Rn+QTkphv6HDj2JVrvon9LvwvsPxOw/1fl/gSn9iceVfvfkvubsk1y05RV4JQATv+MvW25t/A5RvscTkOPv2O4D9h2swK5jsB+PdGcI/m6avcJejV9mGtEyw56KPq81EPP4lyzAef6R3muUe1c5BOpc/1cnqsbZziNM6wAn4qOj8B5dRQ4/zVw3gOcn/XPcTLXRFvg29S/AfielPg+hzVBM/Np8N4W0axUXHmuNLHy7ANkM4TfCr6DzOc4T+Iuqd+7c+xJfl5S7HmB5DzJbXzG/ZG8n9D7EXHgvEtOGmtk+0d8fDEiZPLapieTL3t8kr9M969kdSlYVqN/Iu1WReN3vq7G74n2ezEmJRzhLeH6N1rhrlKcg3aW5O10sLwZfyXXIZ2n7OZOq92M4G7XdqD/Rjqs8YxcAzLftJvCFxN2MwkaEV4d7tR4XdjNcEPObfJ/wNw35P0/irt+FLQJiF2MvRIfEYMJ2sy00uYifJFUkO78JwlLukPZAPKppQ24CL8+UFd+XMIR7ZScCJkRcnLTbwMgp9uE03HYAtX27G74GeAY74DjovRTmjTFXuTrcByx11uKf8l3xfcvNN1HMcM5p/hyQtN9e6BTILtmdS73vhDX4Q6Px+B7ePPA2xRnSHm5QvacywvwhD4MtEPflXiSH6Tkg/hc2LTswDmfzTsnbZwWm66fDV7b+KxcW/iXAv66745hYwLpl5SwFIsr+rka/X7qo9/PJP3OdRij70/7xiI0pvlIT3UYj8jxoQ7jhhw/IMcJD81urJ3BfX4NPkszTsWdbWr2An7N2iLmfJn3e77Ptub7fAC0gmwH0Sr6LUmreY1Wixqtfkg4Ez8Lvub+6Htxb/MBcrlHrkXwSkZoXSUjDc1GUttnI9eS4NH/ncv9HtmQ/8MZTmtndrUzky1KYe6/zOVS+zD3X/m4d/a6z+9bB33+lPc3z3hZ2Ezg1X6OyBekDloATrPY59VSfmWhlDOj2Os1Ttum/TaZz36TLo0D5vPY8wvNcWW7s6bJZcLDj2T2LOauNse8tRPtvsHqDNZ+DnIMX9v8ZHNO0zcwU62+weVdbG3kWXlOB34q+el36K6gG8zqMeS0kDaonmDJ6jxLVT/CRqoVFjtcgY6rVFjvgmEff2Kje2jBqPUufJ3aXUMLUfTzdhTtumwbQwtdqj+Cti3bYbQVbAhtNR/4vHIK+twVumKV7B/nJcrvIRZ/Afkd0h/87qBjki00s/HN4a6Qfy55Z13mg/x5CeNzMv46TWfm+jB/ZZa3c1HYgTbb9Jr0lbbEnEOUQ/lL0Nxu8b2z5mIzLuY49S359BZiwSBZNH4u5UeLTy4InhXys+PTTbc132wDPHQJ/OBKflC6vxc8Ax1i/g14JuIUgYf0m4DnaRmHC99J+PZizLcOznhD8pWyD6SPlH1Y7OD7lOV5SPdKG9Cr4hRpI/rOttoIfAsbofkr6+vB60cG5PqaH9BX12ldvhU+Ad4+AT65zuOX4uW6il/a81SR/yd+kLk06NTwScCeBI5LEvbGLrDrGuwDgH0MsI8Bti5ht3eB/TcNdh/uErG2uQZ/lMeMLTFXtrcldsH9/nnT95F7wU9+zJm4SjwdT44TT1+ED0X8hnxyWy45ynMEyEOb2IP0DGLvqyneBk8E+Od5mt/BT/wFnVnkzMKPIbY8quHGaQjcTgK3RQ037NERN57TA27Eswo3okUn3BK74PYNukuJ20ngtuDhJngDuJ0AbiT/CjfkkTri9ptSd2x5uF2hPE4H3Izbu+D2X8SjErcTwO3fYbOuQ57/zH/fiLFFLMJ91Usd4vpQReYr9Bh70ZcfELFEFv0d8wPhxxd4bLCKeNr8FPhxI4AfVTwr8busxUeXeBwdgN+oxK+Zswd+p334VSR+s7vgR/yl5vHYrcO8+7V5XOd1mPdeNQ932cyttN9l+KrA/1KQjXhF8qysqxBfrAmdw+PTFVlXof7VZn9pCnn4CfczyPP9A9k7szCwS10la1tOhZmFrF2m3DLsoplG3Sv/0k65Yb+MOgry6ex/UC8hOynrJWsarXtb8i2QzRs+e8V1PWSNYg6Vl0WsEuiny3hqRcRQYn3FazKmukB78zH4elGc8bvI/W8dCRkPevS+SvGG3OviJt/r21T7atvv9+V+NF/ayKvC/gf6csZBmh/Q/7fa3mRj1d487w079wzxR8D+fD3sT7Uotb/wNYJ9SZ47DNj/SW//i6g7ttUzJiUfbWj8IuwP+AW5tyVun5ty2Lej59TVd/CdhZ7APYBneC5MwI321uV6lMuD/zwQ43dI36j7qW+neIXy0x3sWPizvL42cWVE6VDSn769f0DnekDU3igGV35Baz4028fzllouRvlQMl8qvynf+EGqdc2iloI6xm1H1jmOBtVnRlRdBPkjxI5tdaoewp/r8AbPMQmbWFytQxcbqgYq6zYju9VtsBdqtGIva5Sxw/i3Riu8HoS1qI5mUu1YrmUG1HKG2vFGfaaIWhDdScOoU22nNY/lxpwJNyFoHyW9AF44gvqPKfFNqD2GAmiT8O2BGo9B545gnQTqO2qdhLaOOvdRbZ0ZfZ3SOOLcSRYWdhQLtdL7qDWBvNAYO0LzzPGUXU6nItROoC3gUJB4w89DgJsCnMPudqZQD5qmui18BczV5y2wrs+T7IEesYPj2TpqzaQXUT9wKa9oQN/u5XVBjPdP2jbWC5fG+VuE0DHxy4BPCHuQXGEPoy7iSZfqDmG9X8RzWU4jzDEwTvQ3NbrNaHQ76qe/TrPBcfiBqKX249d6E3Rrp3cg3LveHq6trqh4iHiUx/eIV6034e+082Mgb3M+blDdtJUXEZuE3iFvI1cj1pqDrQP/msfHEySf5jHUT1GvpXrxAe2b6reC34tuDPdIMHG6w+T4IYY7IZ8nlpw8Qr4xv4dm3xT0G89FZJXcJTXclEzovFzzyx3ZX2sMtekpqt+nItSHXwM4JDkfjudsHhs27ic5D6Nf6MKJlwhmHnPiycn7ecwFuB7w4H6ei4O8gq/mMd/pIL+1AP7RcA0lrIdlDXcC+i2DdWRuuN32sE/J+v+99I5DxpBPldIOclm8fYrasNP30vsMzLvHSTsm4iyqlcq8Ds7CcwzTQeufofUBf4+MaciH+QPALO0C48r8qsg95aaDavxP8Rp/0b1H+W/W6206/Gm190HUS8EjoDO9GTJJblP+9xX8HQ+1xdsK8q2lTZe5Vx6vu8LX4L6M28F3ZM9J/Js1YS7/D9F7JP4mo9O5qxLf35a0HpLvUzrdHc9NYf4Q6HCvvIttJ+fQvvxu/HoQML9l/YS/c9jLeeoh6Kn2Of1yToh+XyB+up3y81vQ+4Jw8PuCINvC7a7pt7sLLPSabneVbSwjNyhwIZvTZmuDcOE6JwAXXd/ErCnMz0BO8njrwPXtANkg4tE9h5HntLJkp002iFq5fAtDssBIv8NPhzza8t1Gmz39Nd5ftOgZ5Ps9PQMdIHQIdEC7/8TuI5sJ3bEPumOf0kf4PkDfg7Bb8ix9WCel1uG82Dgi9ALRObNal74CH4ce2Av4AzjfvoOwhYgj9qO9X+qlCubiHR54e5p0a9R20naMt9PQZZrtA10Wd7NzOKut8QK9d6O8pbCfjWHaS+Qr6V2d8r8wDvy6pc6236nfpWyT9X3Xx2/sw9wnf2f2SbyN8WwArdnJ9zKFHeL0hiw2dTf80jZe0XW3eDekdHfeRd6hVb9ARl6Vb29i4q0i10kxendDb7e0dyLU9r8TIb6hdyJdQbprgYXfLd+JfHguHeG1QvFOxD2rvROZ1r55jkt9azWQ39X6VN0D70mafarWgZy3i/w9fovyLV7zvYFLdao++dYLejsR5fkG4rXCIOnz5nz+/tPLoxMscnZmj6yZonae6G2BFe9FZU7YvaHl1QmW8vz7ZJ2W3rEc8O17Q9t3q/Udi0u17z3op9z8Xb49vTpjEbXDlncs8CFu4Q0gbApoEfPtt+Pl9MnHHOZ6R/qf8HsQQ9D4JPl6pI/AQ+36Wudj5Fxa+Di5Cx8nlU/CfX+Pj0d35+PWOAV+fFj4QtBjbTIY+hj58P3j9yt9Fcd8+K7wWx3w8hjiBnwDPnxwMgu/3Y7imyEmCOENKt47iXjCeh2Itq77ca4f0ynSo0lnUtIUPpeUz0C9CriPEhzFHCZwIp8O+pD8hi7IVNfxcRNvHTEG2SqnTWWX9JhK0fzX8pNB7x6SjV10UQf6wnZBV3gxkl+mI7BzPEYa5P5vxxgp9B+kC6XvQXJJb6vI3nUdg04B/XqOT/J8COdFig1a4hvUE6hP0KKN/3S9L/mPaGE042Hy3SFrEerDL61LuS7EnkdIXigPHaf42xd7gw/bbIBOp3mfPW31qYUdTPI1YQdxz1G8/zApnsO9x5xxadvGYecgo1znp7OEA8kxcOCyMP82/rg4L39L6V5v1+fsD1vfnss3z/SOUnsrSTpFyxHeRTYed7PfLJj2O8kPHkd+0EzDD4ZegwwdoJgD92xKOytzg94bE/i9Iu8p3l6LOaI/hXlU91Tv30WOzpdbwrnmpB9MbyOUL92staK/mTeDfSLZ+g34sXHKBUq/E3ercjiCrm/39yr/Y+HBru/8ZOzuR56//pnJF8c+8uInxeihVfHbd+5XbdQITWgwAAA=');

export class DbgExample extends Script<DbgExampleInputs, DbgExampleOutput> {

  static readonly abi = abi;
  static readonly bytecode = bytecode;

  constructor(wallet: Account) {
    super(bytecode, abi, wallet);
  }
}

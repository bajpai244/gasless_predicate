/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.94.2
  Forc version: 0.63.1
  Fuel-Core version: 0.34.0
*/

import {
  Account,
  BigNumberish,
  BN,
  decompressBytecode,
  Script,
} from 'fuels';

import type { Vec } from "./common";

export type DbgExampleInputs = [input_tx_idxs: Vec<BigNumberish>, output_tx_idxs: Vec<BigNumberish>, signature: string];
export type DbgExampleOutput = string;

export type DbgExampleConfigurables = Partial<{
  PUBLIC_KEY: string;
}>;

const abi = {
  "programType": "script",
  "specVersion": "1",
  "encodingVersion": "1",
  "concreteTypes": [
    {
      "type": "b256",
      "concreteTypeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
    },
    {
      "type": "struct std::b512::B512",
      "concreteTypeId": "745e252e80bec590efc3999ae943f07ccea4d5b45b00bb6575499b64abdd3322",
      "metadataTypeId": 3
    },
    {
      "type": "struct std::vec::Vec<u64>",
      "concreteTypeId": "d5bfe1d4e1ace20166c9b50cadd47e862020561bde24f5189cfc2723f5ed76f4",
      "metadataTypeId": 5,
      "typeArguments": [
        "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
      ]
    },
    {
      "type": "u64",
      "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
    }
  ],
  "metadataTypes": [
    {
      "type": "[_; 2]",
      "metadataTypeId": 0,
      "components": [
        {
          "name": "__array_element",
          "typeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
        }
      ]
    },
    {
      "type": "generic T",
      "metadataTypeId": 1
    },
    {
      "type": "raw untyped ptr",
      "metadataTypeId": 2
    },
    {
      "type": "struct std::b512::B512",
      "metadataTypeId": 3,
      "components": [
        {
          "name": "bits",
          "typeId": 0
        }
      ]
    },
    {
      "type": "struct std::vec::RawVec",
      "metadataTypeId": 4,
      "components": [
        {
          "name": "ptr",
          "typeId": 2
        },
        {
          "name": "cap",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ],
      "typeParameters": [
        1
      ]
    },
    {
      "type": "struct std::vec::Vec",
      "metadataTypeId": 5,
      "components": [
        {
          "name": "buf",
          "typeId": 4,
          "typeArguments": [
            {
              "name": "",
              "typeId": 1
            }
          ]
        },
        {
          "name": "len",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ],
      "typeParameters": [
        1
      ]
    }
  ],
  "functions": [
    {
      "inputs": [
        {
          "name": "input_tx_idxs",
          "concreteTypeId": "d5bfe1d4e1ace20166c9b50cadd47e862020561bde24f5189cfc2723f5ed76f4"
        },
        {
          "name": "output_tx_idxs",
          "concreteTypeId": "d5bfe1d4e1ace20166c9b50cadd47e862020561bde24f5189cfc2723f5ed76f4"
        },
        {
          "name": "signature",
          "concreteTypeId": "745e252e80bec590efc3999ae943f07ccea4d5b45b00bb6575499b64abdd3322"
        }
      ],
      "name": "main",
      "output": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b",
      "attributes": [
        {
          "name": "doc-comment",
          "arguments": [
            " extract inputs, and outputs"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " extract the script bytecode hash"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " calculate the tranasaction hash based on that"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " V0, user can only sign over a single input and single output { only of type coin }"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " txn_hash = sha_256([[input_tx_id_bytes], [hash_of_serialized_output_type_coin]], [script_bytecodehash_bytes])"
          ]
        }
      ]
    }
  ],
  "loggedTypes": [
    {
      "logId": "8385180437869151632",
      "concreteTypeId": "745e252e80bec590efc3999ae943f07ccea4d5b45b00bb6575499b64abdd3322"
    }
  ],
  "messagesTypes": [],
  "configurables": [
    {
      "name": "PUBLIC_KEY",
      "concreteTypeId": "745e252e80bec590efc3999ae943f07ccea4d5b45b00bb6575499b64abdd3322",
      "offset": 13216
    }
  ]
};

const bytecode = decompressBytecode('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');

export class DbgExample extends Script<DbgExampleInputs, DbgExampleOutput> {

  static readonly abi = abi;
  static readonly bytecode = bytecode;

  constructor(wallet: Account) {
    super(bytecode, abi, wallet);
  }
}

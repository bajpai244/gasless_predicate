/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.94.2
  Forc version: 0.63.1
  Fuel-Core version: 0.34.0
*/

import {
  Account,
  BigNumberish,
  BN,
  decompressBytecode,
  Script,
} from 'fuels';

import type { Vec } from "./common";

export type DbgExampleInputs = [input_tx_idxs: Vec<BigNumberish>, output_tx_idxs: Vec<BigNumberish>];
export type DbgExampleOutput = string;

const abi = {
  "programType": "script",
  "specVersion": "1",
  "encodingVersion": "1",
  "concreteTypes": [
    {
      "type": "b256",
      "concreteTypeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
    },
    {
      "type": "struct std::vec::Vec<u64>",
      "concreteTypeId": "d5bfe1d4e1ace20166c9b50cadd47e862020561bde24f5189cfc2723f5ed76f4",
      "metadataTypeId": 3,
      "typeArguments": [
        "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
      ]
    },
    {
      "type": "u64",
      "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
    }
  ],
  "metadataTypes": [
    {
      "type": "generic T",
      "metadataTypeId": 0
    },
    {
      "type": "raw untyped ptr",
      "metadataTypeId": 1
    },
    {
      "type": "struct std::vec::RawVec",
      "metadataTypeId": 2,
      "components": [
        {
          "name": "ptr",
          "typeId": 1
        },
        {
          "name": "cap",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ],
      "typeParameters": [
        0
      ]
    },
    {
      "type": "struct std::vec::Vec",
      "metadataTypeId": 3,
      "components": [
        {
          "name": "buf",
          "typeId": 2,
          "typeArguments": [
            {
              "name": "",
              "typeId": 0
            }
          ]
        },
        {
          "name": "len",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ],
      "typeParameters": [
        0
      ]
    }
  ],
  "functions": [
    {
      "inputs": [
        {
          "name": "input_tx_idxs",
          "concreteTypeId": "d5bfe1d4e1ace20166c9b50cadd47e862020561bde24f5189cfc2723f5ed76f4"
        },
        {
          "name": "output_tx_idxs",
          "concreteTypeId": "d5bfe1d4e1ace20166c9b50cadd47e862020561bde24f5189cfc2723f5ed76f4"
        }
      ],
      "name": "main",
      "output": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b",
      "attributes": [
        {
          "name": "doc-comment",
          "arguments": [
            " extract inputs, and outputs"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " extract the script bytecode hash"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " calculate the tranasaction hash based on that"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " V0, user can only sign over a single input and single output { only of type coin }"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " txn_hash = sha_256([[input_tx_id_bytes], [hash_of_serialized_output_type_coin]], [script_bytecodehash_bytes])"
          ]
        }
      ]
    }
  ],
  "loggedTypes": [],
  "messagesTypes": [],
  "configurables": []
};

const bytecode = decompressBytecode('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');

export class DbgExample extends Script<DbgExampleInputs, DbgExampleOutput> {

  static readonly abi = abi;
  static readonly bytecode = bytecode;

  constructor(wallet: Account) {
    super(bytecode, abi, wallet);
  }
}

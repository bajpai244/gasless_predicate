/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.94.2
  Forc version: 0.63.1
  Fuel-Core version: 0.34.0
*/

import {
  Account,
  BigNumberish,
  BN,
  decompressBytecode,
  Script,
} from 'fuels';

import type { Vec } from "./common";

export type DbgExampleInputs = [input_tx_idxs: Vec<BigNumberish>, output_tx_idxs: Vec<BigNumberish>];
export type DbgExampleOutput = string;

export type DbgExampleConfigurables = Partial<{
  PUBLIC_KEY: string;
}>;

const abi = {
  "programType": "script",
  "specVersion": "1",
  "encodingVersion": "1",
  "concreteTypes": [
    {
      "type": "b256",
      "concreteTypeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
    },
    {
      "type": "struct std::b512::B512",
      "concreteTypeId": "745e252e80bec590efc3999ae943f07ccea4d5b45b00bb6575499b64abdd3322",
      "metadataTypeId": 3
    },
    {
      "type": "struct std::vec::Vec<u64>",
      "concreteTypeId": "d5bfe1d4e1ace20166c9b50cadd47e862020561bde24f5189cfc2723f5ed76f4",
      "metadataTypeId": 5,
      "typeArguments": [
        "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
      ]
    },
    {
      "type": "u64",
      "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
    }
  ],
  "metadataTypes": [
    {
      "type": "[_; 2]",
      "metadataTypeId": 0,
      "components": [
        {
          "name": "__array_element",
          "typeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
        }
      ]
    },
    {
      "type": "generic T",
      "metadataTypeId": 1
    },
    {
      "type": "raw untyped ptr",
      "metadataTypeId": 2
    },
    {
      "type": "struct std::b512::B512",
      "metadataTypeId": 3,
      "components": [
        {
          "name": "bits",
          "typeId": 0
        }
      ]
    },
    {
      "type": "struct std::vec::RawVec",
      "metadataTypeId": 4,
      "components": [
        {
          "name": "ptr",
          "typeId": 2
        },
        {
          "name": "cap",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ],
      "typeParameters": [
        1
      ]
    },
    {
      "type": "struct std::vec::Vec",
      "metadataTypeId": 5,
      "components": [
        {
          "name": "buf",
          "typeId": 4,
          "typeArguments": [
            {
              "name": "",
              "typeId": 1
            }
          ]
        },
        {
          "name": "len",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ],
      "typeParameters": [
        1
      ]
    }
  ],
  "functions": [
    {
      "inputs": [
        {
          "name": "input_tx_idxs",
          "concreteTypeId": "d5bfe1d4e1ace20166c9b50cadd47e862020561bde24f5189cfc2723f5ed76f4"
        },
        {
          "name": "output_tx_idxs",
          "concreteTypeId": "d5bfe1d4e1ace20166c9b50cadd47e862020561bde24f5189cfc2723f5ed76f4"
        }
      ],
      "name": "main",
      "output": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b",
      "attributes": [
        {
          "name": "doc-comment",
          "arguments": [
            " extract inputs, and outputs"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " extract the script bytecode hash"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " calculate the tranasaction hash based on that"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " V0, user can only sign over a single input and single output { only of type coin }"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " txn_hash = sha_256([[input_tx_id_bytes], [hash_of_serialized_output_type_coin]], [script_bytecodehash_bytes])"
          ]
        }
      ]
    }
  ],
  "loggedTypes": [
    {
      "logId": "8385180437869151632",
      "concreteTypeId": "745e252e80bec590efc3999ae943f07ccea4d5b45b00bb6575499b64abdd3322"
    }
  ],
  "messagesTypes": [],
  "configurables": [
    {
      "name": "PUBLIC_KEY",
      "concreteTypeId": "745e252e80bec590efc3999ae943f07ccea4d5b45b00bb6575499b64abdd3322",
      "offset": 12352
    }
  ]
};

const bytecode = decompressBytecode('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');

export class DbgExample extends Script<DbgExampleInputs, DbgExampleOutput> {

  static readonly abi = abi;
  static readonly bytecode = bytecode;

  constructor(wallet: Account) {
    super(bytecode, abi, wallet);
  }
}

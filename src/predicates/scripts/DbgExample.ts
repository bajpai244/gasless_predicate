/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.94.2
  Forc version: 0.63.1
  Fuel-Core version: 0.34.0
*/

import {
  Account,
  BigNumberish,
  BN,
  decompressBytecode,
  Script,
} from 'fuels';

import type { Vec } from "./common";

export type DbgExampleInputs = [input_tx_idxs: Vec<BigNumberish>, output_tx_idxs: Vec<BigNumberish>];
export type DbgExampleOutput = string;

export type DbgExampleConfigurables = Partial<{
  PUBLIC_KEY: string;
}>;

const abi = {
  "programType": "script",
  "specVersion": "1",
  "encodingVersion": "1",
  "concreteTypes": [
    {
      "type": "b256",
      "concreteTypeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
    },
    {
      "type": "struct std::b512::B512",
      "concreteTypeId": "745e252e80bec590efc3999ae943f07ccea4d5b45b00bb6575499b64abdd3322",
      "metadataTypeId": 3
    },
    {
      "type": "struct std::vec::Vec<u64>",
      "concreteTypeId": "d5bfe1d4e1ace20166c9b50cadd47e862020561bde24f5189cfc2723f5ed76f4",
      "metadataTypeId": 5,
      "typeArguments": [
        "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
      ]
    },
    {
      "type": "u64",
      "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
    }
  ],
  "metadataTypes": [
    {
      "type": "[_; 2]",
      "metadataTypeId": 0,
      "components": [
        {
          "name": "__array_element",
          "typeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
        }
      ]
    },
    {
      "type": "generic T",
      "metadataTypeId": 1
    },
    {
      "type": "raw untyped ptr",
      "metadataTypeId": 2
    },
    {
      "type": "struct std::b512::B512",
      "metadataTypeId": 3,
      "components": [
        {
          "name": "bits",
          "typeId": 0
        }
      ]
    },
    {
      "type": "struct std::vec::RawVec",
      "metadataTypeId": 4,
      "components": [
        {
          "name": "ptr",
          "typeId": 2
        },
        {
          "name": "cap",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ],
      "typeParameters": [
        1
      ]
    },
    {
      "type": "struct std::vec::Vec",
      "metadataTypeId": 5,
      "components": [
        {
          "name": "buf",
          "typeId": 4,
          "typeArguments": [
            {
              "name": "",
              "typeId": 1
            }
          ]
        },
        {
          "name": "len",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ],
      "typeParameters": [
        1
      ]
    }
  ],
  "functions": [
    {
      "inputs": [
        {
          "name": "input_tx_idxs",
          "concreteTypeId": "d5bfe1d4e1ace20166c9b50cadd47e862020561bde24f5189cfc2723f5ed76f4"
        },
        {
          "name": "output_tx_idxs",
          "concreteTypeId": "d5bfe1d4e1ace20166c9b50cadd47e862020561bde24f5189cfc2723f5ed76f4"
        }
      ],
      "name": "main",
      "output": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b",
      "attributes": [
        {
          "name": "doc-comment",
          "arguments": [
            " extract inputs, and outputs"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " extract the script bytecode hash"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " calculate the tranasaction hash based on that"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " V0, user can only sign over a single input and single output { only of type coin }"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " txn_hash = sha_256([[input_tx_id_bytes], [hash_of_serialized_output_type_coin]], [script_bytecodehash_bytes])"
          ]
        }
      ]
    }
  ],
  "loggedTypes": [],
  "messagesTypes": [],
  "configurables": [
    {
      "name": "PUBLIC_KEY",
      "concreteTypeId": "745e252e80bec590efc3999ae943f07ccea4d5b45b00bb6575499b64abdd3322",
      "offset": 11640
    }
  ]
};

const bytecode = decompressBytecode('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');

export class DbgExample extends Script<DbgExampleInputs, DbgExampleOutput> {

  static readonly abi = abi;
  static readonly bytecode = bytecode;

  constructor(wallet: Account) {
    super(bytecode, abi, wallet);
  }
}

/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.94.2
  Forc version: 0.64.0
  Fuel-Core version: 0.36.0
*/

import {
  BigNumberish,
  BN,
  decompressBytecode,
  InputValue,
  Predicate,
  PredicateParams,
  Provider,
} from 'fuels';

import type { Enum, Vec } from "./common";

export type TxInputInput = Enum<{ InputCoin: InputCoinInput }>;
export type TxInputOutput = Enum<{ InputCoin: InputCoinOutput }>;
export type TxOutputInput = Enum<{ OutputCoin: OutputCoinInput }>;
export type TxOutputOutput = Enum<{ OutputCoin: OutputCoinOutput }>;

export type AddressInput = { bits: string };
export type AddressOutput = AddressInput;
export type AssetIdInput = { bits: string };
export type AssetIdOutput = AssetIdInput;
export type InputCoinInput = { tx_id: string, output_index: BigNumberish };
export type InputCoinOutput = { tx_id: string, output_index: number };
export type OutputCoinInput = { to: AddressInput, amount: BigNumberish, asset_id: AssetIdInput };
export type OutputCoinOutput = { to: AddressOutput, amount: BN, asset_id: AssetIdOutput };

export type GaslessPredicateConfigurables = Partial<{
    PUBLIC_KEY: string;
}>;

export type GaslessPredicateInputs = [tx_inputs: Vec<TxInputInput>, tx_outputs: Vec<TxOutputInput>, signature: string];

export type GaslessPredicateParameters = Omit<
  PredicateParams<GaslessPredicateInputs, GaslessPredicateConfigurables>,
  'abi' | 'bytecode'
>;

const abi = {
  "programType": "predicate",
  "specVersion": "1",
  "encodingVersion": "1",
  "concreteTypes": [
    {
      "type": "bool",
      "concreteTypeId": "b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903"
    },
    {
      "type": "enum gasless_lib::types::TxInput",
      "concreteTypeId": "921fc2e121b288ee0076a5cb940353e11c70fafa666b09373bbb79aa2827e115",
      "metadataTypeId": 2
    },
    {
      "type": "enum gasless_lib::types::TxOutput",
      "concreteTypeId": "a10e3158add7bee891362d98217638be74ba68009fa599fd54d48989453b3837",
      "metadataTypeId": 3
    },
    {
      "type": "struct std::b512::B512",
      "concreteTypeId": "745e252e80bec590efc3999ae943f07ccea4d5b45b00bb6575499b64abdd3322",
      "metadataTypeId": 10
    },
    {
      "type": "struct std::vec::Vec<enum gasless_lib::types::TxInput>",
      "concreteTypeId": "7c5d587371f099f5c66809855b12476f2423435a30fb4132a33b5005a28e7f8b",
      "metadataTypeId": 12,
      "typeArguments": [
        "921fc2e121b288ee0076a5cb940353e11c70fafa666b09373bbb79aa2827e115"
      ]
    },
    {
      "type": "struct std::vec::Vec<enum gasless_lib::types::TxOutput>",
      "concreteTypeId": "dedad8494789157b78a47ab019072e02ad2a31961ba7b649a82b3bf8d4a6c4fd",
      "metadataTypeId": 12,
      "typeArguments": [
        "a10e3158add7bee891362d98217638be74ba68009fa599fd54d48989453b3837"
      ]
    }
  ],
  "metadataTypes": [
    {
      "type": "[_; 2]",
      "metadataTypeId": 0,
      "components": [
        {
          "name": "__array_element",
          "typeId": 1
        }
      ]
    },
    {
      "type": "b256",
      "metadataTypeId": 1
    },
    {
      "type": "enum gasless_lib::types::TxInput",
      "metadataTypeId": 2,
      "components": [
        {
          "name": "InputCoin",
          "typeId": 6
        }
      ]
    },
    {
      "type": "enum gasless_lib::types::TxOutput",
      "metadataTypeId": 3,
      "components": [
        {
          "name": "OutputCoin",
          "typeId": 7
        }
      ]
    },
    {
      "type": "generic T",
      "metadataTypeId": 4
    },
    {
      "type": "raw untyped ptr",
      "metadataTypeId": 5
    },
    {
      "type": "struct gasless_lib::types::InputCoin",
      "metadataTypeId": 6,
      "components": [
        {
          "name": "tx_id",
          "typeId": 1
        },
        {
          "name": "output_index",
          "typeId": 13
        }
      ]
    },
    {
      "type": "struct gasless_lib::types::OutputCoin",
      "metadataTypeId": 7,
      "components": [
        {
          "name": "to",
          "typeId": 8
        },
        {
          "name": "amount",
          "typeId": 14
        },
        {
          "name": "asset_id",
          "typeId": 9
        }
      ]
    },
    {
      "type": "struct std::address::Address",
      "metadataTypeId": 8,
      "components": [
        {
          "name": "bits",
          "typeId": 1
        }
      ]
    },
    {
      "type": "struct std::asset_id::AssetId",
      "metadataTypeId": 9,
      "components": [
        {
          "name": "bits",
          "typeId": 1
        }
      ]
    },
    {
      "type": "struct std::b512::B512",
      "metadataTypeId": 10,
      "components": [
        {
          "name": "bits",
          "typeId": 0
        }
      ]
    },
    {
      "type": "struct std::vec::RawVec",
      "metadataTypeId": 11,
      "components": [
        {
          "name": "ptr",
          "typeId": 5
        },
        {
          "name": "cap",
          "typeId": 14
        }
      ],
      "typeParameters": [
        4
      ]
    },
    {
      "type": "struct std::vec::Vec",
      "metadataTypeId": 12,
      "components": [
        {
          "name": "buf",
          "typeId": 11,
          "typeArguments": [
            {
              "name": "",
              "typeId": 4
            }
          ]
        },
        {
          "name": "len",
          "typeId": 14
        }
      ],
      "typeParameters": [
        4
      ]
    },
    {
      "type": "u16",
      "metadataTypeId": 13
    },
    {
      "type": "u64",
      "metadataTypeId": 14
    }
  ],
  "functions": [
    {
      "inputs": [
        {
          "name": "tx_inputs",
          "concreteTypeId": "7c5d587371f099f5c66809855b12476f2423435a30fb4132a33b5005a28e7f8b"
        },
        {
          "name": "tx_outputs",
          "concreteTypeId": "dedad8494789157b78a47ab019072e02ad2a31961ba7b649a82b3bf8d4a6c4fd"
        },
        {
          "name": "signature",
          "concreteTypeId": "745e252e80bec590efc3999ae943f07ccea4d5b45b00bb6575499b64abdd3322"
        }
      ],
      "name": "main",
      "output": "b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903",
      "attributes": [
        {
          "name": "doc-comment",
          "arguments": [
            " extract inputs, and outputs"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " extract the script bytecode hash"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " calculate the tranasaction hash based on that"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " V0, user can only sign over a single input and single output { only of type coin }"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " txn_hash = sha_256([[input_tx_id_bytes], [hash_of_serialized_output_type_coin]], [script_bytecodehash_bytes])"
          ]
        }
      ]
    }
  ],
  "loggedTypes": [],
  "messagesTypes": [],
  "configurables": [
    {
      "name": "PUBLIC_KEY",
      "concreteTypeId": "745e252e80bec590efc3999ae943f07ccea4d5b45b00bb6575499b64abdd3322",
      "offset": 15680
    }
  ]
};

const bytecode = decompressBytecode('');

export class GaslessPredicate extends Predicate<
  GaslessPredicateInputs,
  GaslessPredicateConfigurables
> {
  static readonly abi = abi;
  static readonly bytecode = bytecode;

  constructor(params: GaslessPredicateParameters) {
    super({ abi, bytecode, ...params });
  }
}

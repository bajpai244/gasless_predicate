/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.94.2
  Forc version: 0.63.1
  Fuel-Core version: 0.34.0
*/

import {
  BigNumberish,
  BN,
  decompressBytecode,
  InputValue,
  Predicate,
  PredicateParams,
  Provider,
} from 'fuels';

import type { Enum, Vec } from "./common";

export type TxInputInput = Enum<{ InputCoin: InputCoinInput }>;
export type TxInputOutput = Enum<{ InputCoin: InputCoinOutput }>;
export type TxOutputInput = Enum<{ OutputCoin: OutputCoinInput }>;
export type TxOutputOutput = Enum<{ OutputCoin: OutputCoinOutput }>;

export type AddressInput = { bits: string };
export type AddressOutput = AddressInput;
export type AssetIdInput = { bits: string };
export type AssetIdOutput = AssetIdInput;
export type InputCoinInput = { tx_id: string, output_index: BigNumberish };
export type InputCoinOutput = { tx_id: string, output_index: number };
export type OutputCoinInput = { to: AddressInput, amount: BigNumberish, asset_id: AssetIdInput };
export type OutputCoinOutput = { to: AddressOutput, amount: BN, asset_id: AssetIdOutput };

export type GaslessWalletConfigurables = Partial<{
    PUBLIC_KEY: string;
}>;

export type GaslessWalletInputs = [tx_inputs: Vec<TxInputInput>, tx_outputs: Vec<TxOutputInput>, signature: string];

export type GaslessWalletParameters = Omit<
  PredicateParams<GaslessWalletInputs, GaslessWalletConfigurables>,
  'abi' | 'bytecode'
>;

const abi = {
  "programType": "predicate",
  "specVersion": "1",
  "encodingVersion": "1",
  "concreteTypes": [
    {
      "type": "bool",
      "concreteTypeId": "b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903"
    },
    {
      "type": "enum TxInput",
      "concreteTypeId": "67c80f7883622d4f66c11d53e2f037ede5841cd030f0ca3d1dc936d0128507cb",
      "metadataTypeId": 2
    },
    {
      "type": "enum TxOutput",
      "concreteTypeId": "af34e1a28aeada2641e09fe17c04cf603395e41324ed732fded5bcb116df6a77",
      "metadataTypeId": 3
    },
    {
      "type": "struct std::b512::B512",
      "concreteTypeId": "745e252e80bec590efc3999ae943f07ccea4d5b45b00bb6575499b64abdd3322",
      "metadataTypeId": 10
    },
    {
      "type": "struct std::vec::Vec<enum TxInput>",
      "concreteTypeId": "bc7c44c1611de3647c8fb6195acf2d5dd763d20f10a96cbd4a3d7b394d094cd4",
      "metadataTypeId": 12,
      "typeArguments": [
        "67c80f7883622d4f66c11d53e2f037ede5841cd030f0ca3d1dc936d0128507cb"
      ]
    },
    {
      "type": "struct std::vec::Vec<enum TxOutput>",
      "concreteTypeId": "97ff3cc17f62db65f7192a97e4b66c12a128d3e87622971a0c5867781dd581d3",
      "metadataTypeId": 12,
      "typeArguments": [
        "af34e1a28aeada2641e09fe17c04cf603395e41324ed732fded5bcb116df6a77"
      ]
    }
  ],
  "metadataTypes": [
    {
      "type": "[_; 2]",
      "metadataTypeId": 0,
      "components": [
        {
          "name": "__array_element",
          "typeId": 1
        }
      ]
    },
    {
      "type": "b256",
      "metadataTypeId": 1
    },
    {
      "type": "enum TxInput",
      "metadataTypeId": 2,
      "components": [
        {
          "name": "InputCoin",
          "typeId": 6
        }
      ]
    },
    {
      "type": "enum TxOutput",
      "metadataTypeId": 3,
      "components": [
        {
          "name": "OutputCoin",
          "typeId": 7
        }
      ]
    },
    {
      "type": "generic T",
      "metadataTypeId": 4
    },
    {
      "type": "raw untyped ptr",
      "metadataTypeId": 5
    },
    {
      "type": "struct InputCoin",
      "metadataTypeId": 6,
      "components": [
        {
          "name": "tx_id",
          "typeId": 1
        },
        {
          "name": "output_index",
          "typeId": 13
        }
      ]
    },
    {
      "type": "struct OutputCoin",
      "metadataTypeId": 7,
      "components": [
        {
          "name": "to",
          "typeId": 8
        },
        {
          "name": "amount",
          "typeId": 14
        },
        {
          "name": "asset_id",
          "typeId": 9
        }
      ]
    },
    {
      "type": "struct std::address::Address",
      "metadataTypeId": 8,
      "components": [
        {
          "name": "bits",
          "typeId": 1
        }
      ]
    },
    {
      "type": "struct std::asset_id::AssetId",
      "metadataTypeId": 9,
      "components": [
        {
          "name": "bits",
          "typeId": 1
        }
      ]
    },
    {
      "type": "struct std::b512::B512",
      "metadataTypeId": 10,
      "components": [
        {
          "name": "bits",
          "typeId": 0
        }
      ]
    },
    {
      "type": "struct std::vec::RawVec",
      "metadataTypeId": 11,
      "components": [
        {
          "name": "ptr",
          "typeId": 5
        },
        {
          "name": "cap",
          "typeId": 14
        }
      ],
      "typeParameters": [
        4
      ]
    },
    {
      "type": "struct std::vec::Vec",
      "metadataTypeId": 12,
      "components": [
        {
          "name": "buf",
          "typeId": 11,
          "typeArguments": [
            {
              "name": "",
              "typeId": 4
            }
          ]
        },
        {
          "name": "len",
          "typeId": 14
        }
      ],
      "typeParameters": [
        4
      ]
    },
    {
      "type": "u16",
      "metadataTypeId": 13
    },
    {
      "type": "u64",
      "metadataTypeId": 14
    }
  ],
  "functions": [
    {
      "inputs": [
        {
          "name": "tx_inputs",
          "concreteTypeId": "bc7c44c1611de3647c8fb6195acf2d5dd763d20f10a96cbd4a3d7b394d094cd4"
        },
        {
          "name": "tx_outputs",
          "concreteTypeId": "97ff3cc17f62db65f7192a97e4b66c12a128d3e87622971a0c5867781dd581d3"
        },
        {
          "name": "signature",
          "concreteTypeId": "745e252e80bec590efc3999ae943f07ccea4d5b45b00bb6575499b64abdd3322"
        }
      ],
      "name": "main",
      "output": "b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903",
      "attributes": [
        {
          "name": "doc-comment",
          "arguments": [
            " extract inputs, and outputs"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " extract the script bytecode hash"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " calculate the tranasaction hash based on that"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " V0, user can only sign over a single input and single output { only of type coin }"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " txn_hash = sha_256([[input_tx_id_bytes], [hash_of_serialized_output_type_coin]], [script_bytecodehash_bytes])"
          ]
        }
      ]
    }
  ],
  "loggedTypes": [],
  "messagesTypes": [],
  "configurables": [
    {
      "name": "PUBLIC_KEY",
      "concreteTypeId": "745e252e80bec590efc3999ae943f07ccea4d5b45b00bb6575499b64abdd3322",
      "offset": 13784
    }
  ]
};

const bytecode = decompressBytecode('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');

export class GaslessWallet extends Predicate<
  GaslessWalletInputs,
  GaslessWalletConfigurables
> {
  static readonly abi = abi;
  static readonly bytecode = bytecode;

  constructor(params: GaslessWalletParameters) {
    super({ abi, bytecode, ...params });
  }
}

/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.94.2
  Forc version: 0.63.1
  Fuel-Core version: 0.34.0
*/

import {
  BigNumberish,
  BN,
  decompressBytecode,
  InputValue,
  Predicate,
  PredicateParams,
  Provider,
} from 'fuels';

import type { Enum, Vec } from "./common";

export type TxInputInput = Enum<{ InputCoin: InputCoinInput }>;
export type TxInputOutput = Enum<{ InputCoin: InputCoinOutput }>;
export type TxOutputInput = Enum<{ OutputCoin: OutputCoinInput }>;
export type TxOutputOutput = Enum<{ OutputCoin: OutputCoinOutput }>;

export type AddressInput = { bits: string };
export type AddressOutput = AddressInput;
export type AssetIdInput = { bits: string };
export type AssetIdOutput = AssetIdInput;
export type InputCoinInput = { tx_id: string, output_index: BigNumberish };
export type InputCoinOutput = { tx_id: string, output_index: number };
export type OutputCoinInput = { to: AddressInput, amount: BigNumberish, asset_id: AssetIdInput };
export type OutputCoinOutput = { to: AddressOutput, amount: BN, asset_id: AssetIdOutput };

export type GaslessWalletConfigurables = Partial<{
    PUBLIC_KEY: string;
}>;

export type GaslessWalletInputs = [tx_inputs: Vec<TxInputInput>, tx_outputs: Vec<TxOutputInput>, signature: string];

export type GaslessWalletParameters = Omit<
  PredicateParams<GaslessWalletInputs, GaslessWalletConfigurables>,
  'abi' | 'bytecode'
>;

const abi = {
  "programType": "script",
  "specVersion": "1",
  "encodingVersion": "1",
  "concreteTypes": [
    {
      "type": "bool",
      "concreteTypeId": "b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903"
    },
    {
      "type": "enum TxInput",
      "concreteTypeId": "67c80f7883622d4f66c11d53e2f037ede5841cd030f0ca3d1dc936d0128507cb",
      "metadataTypeId": 2
    },
    {
      "type": "enum TxOutput",
      "concreteTypeId": "af34e1a28aeada2641e09fe17c04cf603395e41324ed732fded5bcb116df6a77",
      "metadataTypeId": 3
    },
    {
      "type": "struct std::b512::B512",
      "concreteTypeId": "745e252e80bec590efc3999ae943f07ccea4d5b45b00bb6575499b64abdd3322",
      "metadataTypeId": 10
    },
    {
      "type": "struct std::vec::Vec<enum TxInput>",
      "concreteTypeId": "bc7c44c1611de3647c8fb6195acf2d5dd763d20f10a96cbd4a3d7b394d094cd4",
      "metadataTypeId": 12,
      "typeArguments": [
        "67c80f7883622d4f66c11d53e2f037ede5841cd030f0ca3d1dc936d0128507cb"
      ]
    },
    {
      "type": "struct std::vec::Vec<enum TxOutput>",
      "concreteTypeId": "97ff3cc17f62db65f7192a97e4b66c12a128d3e87622971a0c5867781dd581d3",
      "metadataTypeId": 12,
      "typeArguments": [
        "af34e1a28aeada2641e09fe17c04cf603395e41324ed732fded5bcb116df6a77"
      ]
    }
  ],
  "metadataTypes": [
    {
      "type": "[_; 2]",
      "metadataTypeId": 0,
      "components": [
        {
          "name": "__array_element",
          "typeId": 1
        }
      ]
    },
    {
      "type": "b256",
      "metadataTypeId": 1
    },
    {
      "type": "enum TxInput",
      "metadataTypeId": 2,
      "components": [
        {
          "name": "InputCoin",
          "typeId": 6
        }
      ]
    },
    {
      "type": "enum TxOutput",
      "metadataTypeId": 3,
      "components": [
        {
          "name": "OutputCoin",
          "typeId": 7
        }
      ]
    },
    {
      "type": "generic T",
      "metadataTypeId": 4
    },
    {
      "type": "raw untyped ptr",
      "metadataTypeId": 5
    },
    {
      "type": "struct InputCoin",
      "metadataTypeId": 6,
      "components": [
        {
          "name": "tx_id",
          "typeId": 1
        },
        {
          "name": "output_index",
          "typeId": 13
        }
      ]
    },
    {
      "type": "struct OutputCoin",
      "metadataTypeId": 7,
      "components": [
        {
          "name": "to",
          "typeId": 8
        },
        {
          "name": "amount",
          "typeId": 14
        },
        {
          "name": "asset_id",
          "typeId": 9
        }
      ]
    },
    {
      "type": "struct std::address::Address",
      "metadataTypeId": 8,
      "components": [
        {
          "name": "bits",
          "typeId": 1
        }
      ]
    },
    {
      "type": "struct std::asset_id::AssetId",
      "metadataTypeId": 9,
      "components": [
        {
          "name": "bits",
          "typeId": 1
        }
      ]
    },
    {
      "type": "struct std::b512::B512",
      "metadataTypeId": 10,
      "components": [
        {
          "name": "bits",
          "typeId": 0
        }
      ]
    },
    {
      "type": "struct std::vec::RawVec",
      "metadataTypeId": 11,
      "components": [
        {
          "name": "ptr",
          "typeId": 5
        },
        {
          "name": "cap",
          "typeId": 14
        }
      ],
      "typeParameters": [
        4
      ]
    },
    {
      "type": "struct std::vec::Vec",
      "metadataTypeId": 12,
      "components": [
        {
          "name": "buf",
          "typeId": 11,
          "typeArguments": [
            {
              "name": "",
              "typeId": 4
            }
          ]
        },
        {
          "name": "len",
          "typeId": 14
        }
      ],
      "typeParameters": [
        4
      ]
    },
    {
      "type": "u16",
      "metadataTypeId": 13
    },
    {
      "type": "u64",
      "metadataTypeId": 14
    }
  ],
  "functions": [
    {
      "inputs": [
        {
          "name": "tx_inputs",
          "concreteTypeId": "bc7c44c1611de3647c8fb6195acf2d5dd763d20f10a96cbd4a3d7b394d094cd4"
        },
        {
          "name": "tx_outputs",
          "concreteTypeId": "97ff3cc17f62db65f7192a97e4b66c12a128d3e87622971a0c5867781dd581d3"
        },
        {
          "name": "signature",
          "concreteTypeId": "745e252e80bec590efc3999ae943f07ccea4d5b45b00bb6575499b64abdd3322"
        }
      ],
      "name": "main",
      "output": "b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903",
      "attributes": [
        {
          "name": "doc-comment",
          "arguments": [
            " extract inputs, and outputs"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " extract the script bytecode hash"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " calculate the tranasaction hash based on that"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " V0, user can only sign over a single input and single output { only of type coin }"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " txn_hash = sha_256([[input_tx_id_bytes], [hash_of_serialized_output_type_coin]], [script_bytecodehash_bytes])"
          ]
        }
      ]
    }
  ],
  "loggedTypes": [],
  "messagesTypes": [],
  "configurables": [
    {
      "name": "PUBLIC_KEY",
      "concreteTypeId": "745e252e80bec590efc3999ae943f07ccea4d5b45b00bb6575499b64abdd3322",
      "offset": 15296
    }
  ]
};

const bytecode = decompressBytecode('');

export class GaslessWallet extends Predicate<
  GaslessWalletInputs,
  GaslessWalletConfigurables
> {
  static readonly abi = abi;
  static readonly bytecode = bytecode;

  constructor(params: GaslessWalletParameters) {
    super({ abi, bytecode, ...params });
  }
}

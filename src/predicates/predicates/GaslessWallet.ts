/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.94.2
  Forc version: 0.63.1
  Fuel-Core version: 0.34.0
*/

import {
  BigNumberish,
  BN,
  decompressBytecode,
  InputValue,
  Predicate,
  PredicateParams,
  Provider,
} from 'fuels';

import type { Enum, Vec } from "./common";

export type TxOutputInput = Enum<{ OutputCoin: OutputCoinInput }>;
export type TxOutputOutput = Enum<{ OutputCoin: OutputCoinOutput }>;

export type AddressInput = { bits: string };
export type AddressOutput = AddressInput;
export type AssetIdInput = { bits: string };
export type AssetIdOutput = AssetIdInput;
export type OutputCoinInput = { to: AddressInput, amount: BigNumberish, asset_id: AssetIdInput };
export type OutputCoinOutput = { to: AddressOutput, amount: BN, asset_id: AssetIdOutput };

export type GaslessWalletConfigurables = Partial<{
    PUBLIC_KEY: string;
}>;

export type GaslessWalletInputs = [tx_outputs: Vec<TxOutputInput>];

export type GaslessWalletParameters = Omit<
  PredicateParams<GaslessWalletInputs, GaslessWalletConfigurables>,
  'abi' | 'bytecode'
>;

const abi = {
  "programType": "predicate",
  "specVersion": "1",
  "encodingVersion": "1",
  "concreteTypes": [
    {
      "type": "bool",
      "concreteTypeId": "b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903"
    },
    {
      "type": "enum TxOutput",
      "concreteTypeId": "af34e1a28aeada2641e09fe17c04cf603395e41324ed732fded5bcb116df6a77",
      "metadataTypeId": 2
    },
    {
      "type": "struct std::b512::B512",
      "concreteTypeId": "745e252e80bec590efc3999ae943f07ccea4d5b45b00bb6575499b64abdd3322",
      "metadataTypeId": 8
    },
    {
      "type": "struct std::vec::Vec<enum TxOutput>",
      "concreteTypeId": "97ff3cc17f62db65f7192a97e4b66c12a128d3e87622971a0c5867781dd581d3",
      "metadataTypeId": 10,
      "typeArguments": [
        "af34e1a28aeada2641e09fe17c04cf603395e41324ed732fded5bcb116df6a77"
      ]
    }
  ],
  "metadataTypes": [
    {
      "type": "[_; 2]",
      "metadataTypeId": 0,
      "components": [
        {
          "name": "__array_element",
          "typeId": 1
        }
      ]
    },
    {
      "type": "b256",
      "metadataTypeId": 1
    },
    {
      "type": "enum TxOutput",
      "metadataTypeId": 2,
      "components": [
        {
          "name": "OutputCoin",
          "typeId": 5
        }
      ]
    },
    {
      "type": "generic T",
      "metadataTypeId": 3
    },
    {
      "type": "raw untyped ptr",
      "metadataTypeId": 4
    },
    {
      "type": "struct OutputCoin",
      "metadataTypeId": 5,
      "components": [
        {
          "name": "to",
          "typeId": 6
        },
        {
          "name": "amount",
          "typeId": 11
        },
        {
          "name": "asset_id",
          "typeId": 7
        }
      ]
    },
    {
      "type": "struct std::address::Address",
      "metadataTypeId": 6,
      "components": [
        {
          "name": "bits",
          "typeId": 1
        }
      ]
    },
    {
      "type": "struct std::asset_id::AssetId",
      "metadataTypeId": 7,
      "components": [
        {
          "name": "bits",
          "typeId": 1
        }
      ]
    },
    {
      "type": "struct std::b512::B512",
      "metadataTypeId": 8,
      "components": [
        {
          "name": "bits",
          "typeId": 0
        }
      ]
    },
    {
      "type": "struct std::vec::RawVec",
      "metadataTypeId": 9,
      "components": [
        {
          "name": "ptr",
          "typeId": 4
        },
        {
          "name": "cap",
          "typeId": 11
        }
      ],
      "typeParameters": [
        3
      ]
    },
    {
      "type": "struct std::vec::Vec",
      "metadataTypeId": 10,
      "components": [
        {
          "name": "buf",
          "typeId": 9,
          "typeArguments": [
            {
              "name": "",
              "typeId": 3
            }
          ]
        },
        {
          "name": "len",
          "typeId": 11
        }
      ],
      "typeParameters": [
        3
      ]
    },
    {
      "type": "u64",
      "metadataTypeId": 11
    }
  ],
  "functions": [
    {
      "inputs": [
        {
          "name": "tx_outputs",
          "concreteTypeId": "97ff3cc17f62db65f7192a97e4b66c12a128d3e87622971a0c5867781dd581d3"
        }
      ],
      "name": "main",
      "output": "b760f44fa5965c2474a3b471467a22c43185152129295af588b022ae50b50903",
      "attributes": [
        {
          "name": "doc-comment",
          "arguments": [
            " extract inputs, and outputs"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " extract the script bytecode hash"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " calculate the tranasaction hash based on that"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            ""
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " V0, user can only sign over a single input and single output { only of type coin }"
          ]
        },
        {
          "name": "doc-comment",
          "arguments": [
            " txn_hash = sha_256([[input_tx_id_bytes], [hash_of_serialized_output_type_coin]], [script_bytecodehash_bytes])"
          ]
        }
      ]
    }
  ],
  "loggedTypes": [],
  "messagesTypes": [],
  "configurables": [
    {
      "name": "PUBLIC_KEY",
      "concreteTypeId": "745e252e80bec590efc3999ae943f07ccea4d5b45b00bb6575499b64abdd3322",
      "offset": 6384
    }
  ]
};

const bytecode = decompressBytecode('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');

export class GaslessWallet extends Predicate<
  GaslessWalletInputs,
  GaslessWalletConfigurables
> {
  static readonly abi = abi;
  static readonly bytecode = bytecode;

  constructor(params: GaslessWalletParameters) {
    super({ abi, bytecode, ...params });
  }
}
